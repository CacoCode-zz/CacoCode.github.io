{"meta":{"title":"CodePlus","subtitle":null,"description":null,"author":"Caco - Zan","url":"https://zcheng.site","root":"/"},"pages":[{"title":"about","date":"2017-11-04T14:39:03.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"about/index.html","permalink":"https://zcheng.site/about/index.html","excerpt":"","text":"生活、工作和兴趣 生活中的一些事 🏄🏿‍♂️ 工作上的一些事 💻 感兴趣的一些事 🎨 ⏳"},{"title":"categories","date":"2019-05-03T12:06:28.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"categories/index.html","permalink":"https://zcheng.site/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2019-05-03T12:21:26.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"friends/index.html","permalink":"https://zcheng.site/friends/index.html","excerpt":"","text":""},{"title":"个人简历","date":"2020-10-05T12:21:26.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"private/resume.html","permalink":"https://zcheng.site/private/resume.html","excerpt":"","text":"基本资料 姓名： 程植 性别： 男 电话：18507152185 电子邮箱：1451426471@qq.com 求职意向：Web前端 工作年限：3年 Github: https://github.com/zchengsite 博客：https://zcheng.site/ 学校：武汉软件工程职业学院（2015 - 2018） 专业：软件技术 专业技能 熟悉JavaScript、HTML5、CSS3 熟悉Vue.js框架，了解React框架 熟悉微信小程序开发，了解相关UI框架 熟悉ES6语法 了解Python 工作经历 公司名称：武汉深度网科技有限公司 在职时间：2017.11.04 - 2020.10.01 职位名称：Web前端 工作描述： 构建公司内部基于Vue.js的通用框架系统 负责公司核心产品框架设计、核心代码编写及相关文档维护 配合后台完成数据接口设计、接口对接及页面数据渲染 制定部门的代码风格规范和Git提交规范并推动部门的代码审核流程 偶有参与后台接口编写、脚本编写 项目经历 基于Vue.js的通用框架构建、开发和维护 项目时间：2018.05 - 2020.10 项目描述：基于Vue.js技术栈搭建的后台管理模板，主要提供给公司后续业务系统开发。 方案选型：基于Vue CLI 3的默认Webpack配置项进行库构建优化处理，整合了Remark Admin UI &amp; Element UI &amp; axios &amp; permission control &amp; ESLint等插件和功能。 负责内容：构建页面布局组件、基础组件和复杂组件以及常见工具方法的封装，整合动态路由、权限控制以及常见功能组件样式的设计与开发。 风险监测与预警平台 项目时间：2018.06 - 2020.10 项目描述：风险监测与预警平台是为江苏省监管局和武汉市监管局提供的网络舆情风险预警系统，通过对负面网络舆情进行采集、分类、分析以及呈现，满足省市局舆情监测工作，为领导决策提供参考。 方案选型：基于Vue.js的通用框架构建的后台管理平台模板进行业务组件开发。 负责内容： 基于内部框架进行定制化开发 前端页面、功能、业务组件的开发 与后端对接，完成页面数据渲染与交互 项目地址：https://obs.shendu.info 全国城市高质量发展可视化平台 项目时间：2018.10 - 2019.05 项目描述：全国城市高质量发展可视化平台通过分析全国城市各个指标，对相应城市指标进行评分、排名、统计。最终通过图表形式呈现出来。 方案选型：Vue-cli3 + echarts + flex 进行搭建。 负责内容： 页面整体布局实现 部分图表定制化样式实现 与后端对接，完成页面数据渲染与交互 项目地址：http://obs.shendu.info:50/#/ 郑州市郑东新区安全监管平台 项目时间：2020.7 - 2020.10 项目描述：郑州市郑东新区安全监管平台是为郑东新区安全生产提供的可视化监管方案。 方案选型：Vue-cli3 + echarts + element ui，采用flex进行布局，适应多端设备。 负责内容： 页面整体布局实现 部分图表定制化样式实现 与后端对接，完成页面数据渲染与交互 项目地址：http://obs.shendu.info:86/ username: admin password: 123456"},{"title":"tags","date":"2019-05-03T12:03:35.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"tags/index.html","permalink":"https://zcheng.site/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-01-25T05:45:48.547Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"scss/css-animation-design/base.css","permalink":"https://zcheng.site/scss/css-animation-design/base.css","excerpt":"","text":".rotate-demo.demo-1 { display: inline-block; width: 1rem; height: 1rem; border-radius: 50%; box-shadow: 0 -21px 0 0 #a3afb7, 14px -14px 0 0 #a3afb7, 21px 0 0 0 #a3afb7, 14px 14px 0 0 #a3afb7, 0 21px 0 0 #a3afb7, -14px 14px 0 0 #a3afb7, -21px 0 0 0 #a3afb7, -14px -14px 0 0 #a3afb7; animation: rotate-demo-1 1.5s infinite ease; } @keyframes rotate-demo-1 { 0% { transform: rotate(0deg); } 80% { transform: rotate(280deg); } 100% { transform: rotate(270deg); } } .rotate-demo.demo-2 { display: inline-block; height: 4.5rem; width: 4.5rem; border: 4px solid gray; border-bottom-color: transparent; border-radius: 50%; animation: rotate-demo-2 1s infinite linear; } @keyframes rotate-demo-2 { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } .jump-demo.demo-1 { position: relative; height: 8rem; width: 16rem; border-bottom: 2px solid gray; } .jump-demo.demo-1::before { content: \"\"; position: absolute; bottom: 0; left: 3rem; width: 3rem; height: 3rem; border-radius: 5px; background-color: gray; transform-origin: center center; animation: jump-demo-1 1.2s infinite ease-in-out alternate; } .jump-demo.demo-1::after { content: \"\"; position: absolute; bottom: 0; left: 10rem; width: 3rem; height: 3rem; border-radius: 5px; background-color: gray; transform-origin: -80% center; animation: jump-demo-2 1.2s infinite linear alternate, jump-demo-2-2 1.2s infinite ease; } @keyframes jump-demo-1 { from { transform: translateX(0); } to { transform: translateX(7rem); } } @keyframes jump-demo-2 { 0%, 20% { transform: rotate(0); } 80%, 100% { transform: rotate(-180deg); } } @keyframes jump-demo-2-2 { 0%, 80% { width: 3rem; height: 3rem; } 82%, 86% { width: 3.5rem; height: 2.5rem; } } .jump-demo.demo-2 { position: relative; width: 10rem; height: 0.3rem; margin: 10rem 0 0 0; background-color: gray; animation: jump-demo-rubberBand 0.8s infinite ease; } .jump-demo.demo-2::before { content: \"\"; position: absolute; left: 3.5rem; bottom: 0; width: 3rem; height: 3rem; background-color: gray; border-radius: 5px; transform-origin: center; animation: jump-demo-top-bottom 0.8s infinite linear, jump-demo-rotate 1.5s infinite linear; } @keyframes jump-demo-rubberBand { 0%, 40% { transform: scale3d(1, 1, 1); } 50% { transform: scale3d(1.25, 0.75, 1); } 60%, 100% { transform: scale3d(1, 1, 1); } } @keyframes jump-demo-top-bottom { 0% { bottom: 5rem; } 3% { bottom: 4.9rem; } 6% { bottom: 4.8rem; } 9% { bottom: 4.7rem; } 12% { bottom: 4.6rem; } 15% { bottom: 4.5rem; } 18% { bottom: 4.4rem; } 21% { bottom: 4.3rem; } 24% { bottom: 4.2rem; } 50% { bottom: 0.3rem; } 76% { bottom: 4.2rem; } 79% { bottom: 4.3rem; } 82% { bottom: 4.4rem; } 85% { bottom: 4.5rem; } 88% { bottom: 4.6rem; } 91% { bottom: 4.7rem; } 94% { bottom: 4.8rem; } 97% { bottom: 4.9rem; } 100% { bottom: 5rem; } } @keyframes jump-demo-rotate { 0% { transform: rotate(0); } 100% { transform: rotate(270deg); } }"},{"title":"","date":"2021-01-25T05:45:48.547Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"scss/something-about-css.css","permalink":"https://zcheng.site/scss/something-about-css.css","excerpt":"","text":"@charset \"UTF-8\"; /*transition-demo*/ .transition-demo { position: relative; cursor: pointer; color: #24292e; transition: all 0.1s; /*demo1*/ /*demo-2*/ } .transition-demo.demo-1::after { content: \"\"; position: absolute; left: 0; right: 0; bottom: 0; transition: transform 0.3s ease; height: 2px; background: linear-gradient(to right, #24292e, #666); transform: scaleX(0); transform-origin: center right; } .transition-demo.demo-1:hover::after { transform: scaleX(1); transform-origin: center left; } .transition-demo.demo-2:hover { color: #fff; z-index: 1; } .transition-demo.demo-2::after { content: \"\"; position: absolute; top: 0; bottom: 0; left: -2px; right: -2px; transition: transform 0.1s linear; background: linear-gradient(#24292e, #666); transform: scaleY(0); transform-origin: bottom; z-index: -1; } .transition-demo.demo-2:hover::after { transform: scaleY(1); } .transition-demo.demo-3-parent { padding: 2px 0; } .transition-demo.demo-3-parent::before, .transition-demo.demo-3-parent::after { content: \"\"; position: absolute; background: #262626; transform: scaleX(0); transition: transform 0.3s; left: 0; right: 0; height: 2px; } .transition-demo.demo-3-parent::before { top: 0; transform-origin: center right; } .transition-demo.demo-3-parent::after { bottom: 0; transform-origin: center left; } .transition-demo.demo-3-parent:hover::before { transform-origin: center left; transform: scaleX(1); } .transition-demo.demo-3-parent:hover::after { transform-origin: center right; transform: scaleX(1); } .transition-demo.demo-3-child { padding: 0 2px; } .transition-demo.demo-3-child::before, .transition-demo.demo-3-child::after { content: \"\"; position: absolute; background: #262626; transform: scaleY(0); transition: transform 0.3s; top: 0; bottom: 0; width: 2px; } .transition-demo.demo-3-child::before { left: 0; transform-origin: center top; } .transition-demo.demo-3-child::after { right: 0; transform-origin: center bottom; } .transition-demo.demo-3-child:hover::before { transform-origin: center bottom; transform: scaleY(1); } .transition-demo.demo-3-child:hover::after { transform-origin: center top; transform: scaleY(1); } /*animation-demo*/ /*demo-1*/ .animation-demo.demo-1 { width: 2em; height: 2em; border-radius: 50%; background: gray; animation: animation-demo-1 1s infinite ease-in-out; } @keyframes animation-demo-1 { 0% { transform: scale(0); } 100% { opacity: 0; transform: scale(1); } } .animation-demo.demo-2 { position: relative; width: 1.5em; height: 1.5em; border-radius: 50%; animation: animation-demo-2 2s infinite ease-in-out both 0s; } .animation-demo.demo-2::before { width: 1.5em; height: 1.5em; border-radius: 50%; animation: animation-demo-2 2s infinite ease-in-out both 0.2s; content: \"\"; position: absolute; left: 2em; } .animation-demo.demo-2::after { width: 1.5em; height: 1.5em; border-radius: 50%; animation: animation-demo-2 2s infinite ease-in-out both 0.4s; content: \"\"; position: absolute; left: 4em; } @keyframes animation-demo-2 { 0%, 100% { box-shadow: 0 1.5em 0 -1.5em gray; } 50% { box-shadow: 0 1.5em 0 0 gray; } } /*css filter*/ /*filter-shadow*/ /*demo1 2 3*/ .filter-shadow { margin: 0 10px; display: inline-block; height: 100px; width: 100px; border-radius: 50%; background-position: center; background-size: cover; background-repeat: no-repeat; position: relative; } .filter-shadow::after { content: \"\"; height: 100%; width: 100%; border-radius: 50%; z-index: -1; background: inherit; position: absolute; top: 10px; left: 0; filter: blur(10px) brightness(80%) opacity(0.8); transform: scale(0.95); } .filter-shadow.demo-1 { background-image: url(\"https://qiniu.zcheng.site/something-about-css-css-filter-test1.png\"); } .filter-shadow.demo-2 { background-image: url(\"https://qiniu.zcheng.site/something-about-css-css-filter-test2.png\"); } .filter-shadow.demo-3 { background-image: url(\"https://qiniu.zcheng.site/something-about-css-css-filter-test3.png\"); } /*acrylic*/ /*demo-1*/ .acrylic-filer.demo-1 { height: 300px; width: 100%; background: url(\"https://qiniu.zcheng.site/something-about-css-acrylic.png\") no-repeat center/contain; background-attachment: fixed; display: flex; justify-content: center; align-items: center; } .acrylic-filer.demo-1 .acrylic { padding: 4em 6em; position: relative; z-index: 1; overflow: hidden; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1), 0 1px 8px rgba(0, 0, 0, 0.2); } .acrylic-filer.demo-1 .acrylic::before { filter: blur(10px); content: \"\"; position: absolute; left: -10px; top: -10px; right: -10px; bottom: -10px; width: calc(100% + 20px); height: calc(100% + 20px); z-index: -1; background: url(\"https://qiniu.zcheng.site/something-about-css-acrylic.png\") no-repeat center/contain; background-attachment: fixed; } .acrylic-filer.demo-1 .acrylic::after { content: \"\"; position: absolute; top: 0; bottom: 0; left: 0; right: 0; background: rgba(255, 255, 255, 0.7); z-index: -1; } .acrylic-backdrop-filter.demo-2 { height: 300px; width: 100%; background: url(\"https://qiniu.zcheng.site/something-about-css-acrylic.png\") no-repeat center/contain; background-attachment: fixed; display: flex; justify-content: center; align-items: center; } .acrylic-backdrop-filter.demo-2 .acrylic { padding: 4em 6em; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1), 0 1px 8px rgba(0, 0, 0, 0.2); background: rgba(255, 255, 255, 0.7); -webkit-backdrop-filter: blur(10px); backdrop-filter: blur(10px); background-blend-mode: exclusion; } /*css border*/ .border-demo { position: relative; background: gray; color: #fff; text-align: center; cursor: pointer; /*垂直小书签*/ /*水平小书签*/ /*水平带小折角书签*/ } .border-demo.demo-1 { height: 4.2rem; width: 2.8rem; font-size: 1.5rem; line-height: 2rem; } .border-demo.demo-1::after { content: \"\"; position: absolute; left: 0; top: 100%; border: 1.4rem solid gray; border-top-width: 0; border-bottom-color: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; } .border-demo.demo-2 { height: 2.8rem; width: 4.2rem; font-size: 1.5rem; line-height: 2.8rem; } .border-demo.demo-2::after { content: \"\"; position: absolute; left: 100%; top: 0; border: 1.4rem solid gray; border-left-width: 0; border-right-color: transparent; border-top-right-radius: 3px; border-bottom-right-radius: 3px; } .border-demo.demo-3 { height: 2.8rem; width: 12rem; font-size: 1.5rem; line-height: 2.8rem; } .border-demo.demo-3::after { content: \"\"; position: absolute; left: 100%; top: 0; border: 1.4rem solid gray; border-left-width: 0; border-right-color: transparent; border-top-right-radius: 3px; border-bottom-right-radius: 3px; } .border-demo.demo-3:before { content: \"\"; position: absolute; left: 0; top: -1.6rem; border: 0.8rem solid #555555; border-top-color: transparent; border-left-color: transparent; } .border-demo.demo-4 { width: 0rem; height: 0rem; position: relative; margin-left: 20px; } .border-demo.demo-4::before { content: \"\"; position: absolute; border: 1rem solid gray; border-bottom-left-radius: 3px; right: 0; border-top-color: transparent; border-left-color: transparent; border-bottom-left-radius: 3px; } .border-demo.demo-4::after { content: \"\"; position: absolute; border: 1rem solid gray; border-bottom-left-radius: 3px; left: 0; border-bottom-color: transparent; border-right-color: transparent; border-top-right-radius: 3px; } .border-demo .demo-5-1 { width: 0rem; height: 0rem; position: relative; margin: 0 20px; } .border-demo .demo-5-1::before { content: \"\"; position: absolute; border: 1rem solid gray; animation: border-demo-5 infinite ease-in-out both 1.5s; transform-origin: right center; border-top-color: transparent; border-left-color: transparent; border-bottom-left-radius: 3px; right: 0; } .border-demo .demo-5-1::after { content: \"\"; position: absolute; border: 1rem solid gray; animation: border-demo-5 infinite ease-in-out both 1.5s; transform-origin: left center; border-bottom-color: transparent; border-right-color: transparent; border-top-right-radius: 3px; left: 0; } .border-demo .demo-5-2 { width: 0rem; height: 0rem; position: relative; margin: 0 50px; } .border-demo .demo-5-2::before { content: \"\"; position: absolute; border: 1rem solid gray; animation: border-demo-5 infinite ease-in-out both 1.5s; transform-origin: right center; border-top-color: transparent; border-left-color: transparent; animation-delay: 0.2s; border-bottom-left-radius: 3px; right: 0; } .border-demo .demo-5-2::after { content: \"\"; position: absolute; border: 1rem solid gray; animation: border-demo-5 infinite ease-in-out both 1.5s; transform-origin: left center; animation-delay: 0.2s; border-bottom-color: transparent; border-right-color: transparent; border-top-right-radius: 3px; left: 0; } .border-demo .demo-5-3 { width: 0rem; height: 0rem; position: relative; margin: 0 80px; } .border-demo .demo-5-3::before { content: \"\"; position: absolute; border: 1rem solid gray; animation: border-demo-5 infinite ease-in-out both 1.5s; transform-origin: right center; border-top-color: transparent; border-left-color: transparent; animation-delay: 0.4s; border-bottom-left-radius: 3px; right: 0; } .border-demo .demo-5-3::after { content: \"\"; position: absolute; border: 1rem solid gray; animation: border-demo-5 infinite ease-in-out both 1.5s; transform-origin: left center; animation-delay: 0.4s; border-bottom-color: transparent; border-right-color: transparent; border-top-right-radius: 3px; left: 0; } @keyframes border-demo-5 { 0%, 100% { transform: scale(1); } 50% { transform: scale(0); } } .border-demo.demo-6 { height: 1.5rem; width: 1rem; background: transparent; border-radius: 3px; animation: border-demo-6 1.8s infinite ease-in-out 0s both; position: relative; margin: 0 40px; transform: skewX(-25deg); } .border-demo.demo-6::before { height: 1.5rem; width: 1rem; background: transparent; border-radius: 3px; animation: border-demo-6 1.8s infinite ease-in-out -0.16s both; content: \"\"; position: absolute; left: -20px; top: 0; } .border-demo.demo-6::after { height: 1.5rem; width: 1rem; background: transparent; border-radius: 3px; animation: border-demo-6 1.8s infinite ease-in-out 0.16s both; content: \"\"; position: absolute; right: -20px; top: 0; } @keyframes border-demo-6 { 0%, 80%, 100% { box-shadow: 0 1.5rem 0 -0.75rem gray; } 40% { box-shadow: 0 1.5rem 0 0 gray; } } .border-demo.demo-7 { position: relative; background-color: #fff; height: 50px; width: 36px; border-top: 2px solid gray; border-bottom: 2px solid gray; animation: border-demo-7 3.2s infinite ease-out; } .border-demo.demo-7::before { position: absolute; top: -1px; left: 3px; content: \"\"; width: 26px; height: 23px; border-width: 0 2px 1px 2px; border-style: solid; border-color: gray; border-radius: 0 0 100% 100% / 0 0 180% 180%; } .border-demo.demo-7::after { position: absolute; bottom: -1px; left: 3px; content: \"\"; width: 26px; height: 23px; border-width: 1px 2px 0 2px; border-style: solid; border-color: gray; border-radius: 100% 100% 0 0 / 180% 180% 0 0; } @keyframes border-demo-7 { 0% { transform: rotate(0deg); } 35% { transform: rotate(181deg); } 40%, 50% { transform: rotate(180deg); } 85% { transform: rotate(361deg); } 90%, 100% { transform: rotate(360deg); } } .border-button-demo.demo-1 { display: inline-block; position: relative; } .border-button-demo.demo-1:hover::before { content: \"\"; z-index: 10; position: absolute; border-top-left-radius: 3px; border-bottom-right-radius: 3px; border-top-right-radius: 3px; animation: border-button-top-right 1s infinite ease-in-out both; } .border-button-demo.demo-1:hover::after { content: \"\"; z-index: 10; position: absolute; border-top-right-radius: 3px; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; animation: border-button-bottom-right 1s infinite ease-in-out both; } .border-button-demo.demo-1 button { position: relative; padding: 1.2rem 2rem; line-height: 1; background: #fff; border-width: 0; background: #eee; color: #606266; text-align: center; cursor: pointer; border-radius: 4px; outline: none; } .border-button-demo.demo-1 button:hover { color: #409eff; border-color: transparent; background-color: #ecf5ff; border-width: 0; } .border-button-demo.demo-1 button:hover::before { content: \"\"; z-index: 10; position: absolute; border-top-right-radius: 3px; border-bottom-left-radius: 3px; border-top-left-radius: 3px; animation: border-button-top-left 1s infinite ease-in-out both; } .border-button-demo.demo-1 button:hover::after { content: \"\"; z-index: 10; position: absolute; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-bottom-left-radius: 3px; animation: border-button-bottom-left 1s infinite ease-in-out both; } @keyframes border-button-top-left { 0%, 100% { left: -.3rem; top: -.3rem; border: .6rem solid #409eff; border-right-color: transparent; border-bottom-color: transparent; } 50% { left: -.5rem; top: -.5rem; border: 0.6rem solid #a0cfff; border-right-color: transparent; border-bottom-color: transparent; } } @keyframes border-button-bottom-left { 0%, 100% { left: -.3rem; bottom: -.3rem; border: .6rem solid #409eff; border-right-color: transparent; border-top-color: transparent; } 50% { left: -.5rem; bottom: -.5rem; border: 0.6rem solid #a0cfff; border-right-color: transparent; border-top-color: transparent; } } @keyframes border-button-top-right { 0%, 100% { right: -.3rem; top: -.3rem; border: .6rem solid #409eff; border-left-color: transparent; border-bottom-color: transparent; } 50% { right: -.5rem; top: -.5rem; border: 0.6rem solid #a0cfff; border-left-color: transparent; border-bottom-color: transparent; } } @keyframes border-button-bottom-right { 0%, 100% { right: -.3rem; bottom: -.3rem; border: .6rem solid #409eff; border-left-color: transparent; border-top-color: transparent; } 50% { right: -.5rem; bottom: -.5rem; border: 0.6rem solid #a0cfff; border-left-color: transparent; border-top-color: transparent; } } .shadow-demo.demo-1 { position: relative; width: 100%; height: 50rem; background-image: url(\"https://qiniu.zcheng.site/something-about-css-panel-bg.png\"); border-radius: 10px; z-index: 9; overflow: hidden; } .shadow-demo.demo-1 .card-1 { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 40%; height: 40rem; background-color: #fff; box-shadow: 2px 2px 5px 0px #1f1f1f; } .shadow-demo.demo-1 .card-1 .card-title { position: absolute; top: 30%; left: 50%; transform: translate(-50%, -50%); font-size: 36px; font-weight: bold; } .shadow-demo.demo-1 .card-1 .card-footer { position: absolute; bottom: 10%; left: 50%; transform: translate(-50%, -50%); font-size: 14px; font-weight: bold; } .shadow-demo.demo-1 .shadow-demo-item.ellipse-900 { position: absolute; top: 0; left: 0; bottom: 0; right: 0; z-index: 10; transform: rotate(-66deg); transform-origin: center; filter: blur(15px); background: linear-gradient(transparent 60%, rgba(0, 0, 0, 0.6) 15%); background-size: 100% 18%; } /*to-be-continued*/ .to-be-continued dot { display: inline-block; overflow: hidden; height: 1em; line-height: 1; vertical-align: -.25em; } .to-be-continued dot::after { display: block; white-space: pre-wrap; content: \"...\\A..\\A.\"; animation: loading 3s infinite step-start both; } @keyframes loading { 33% { transform: translate3d(0, -2em, 0); } 66% { transform: translate3d(0, -1em, 0); } }"},{"title":"","date":"2021-01-25T05:45:48.547Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"scss/pixel-icon-design/base.css","permalink":"https://zcheng.site/scss/pixel-icon-design/base.css","excerpt":"","text":".pixel-slime { height: 100px; width: 105px; position: relative; display: inline-block; margin: 20px; } .pixel-slime::before { content: \"\"; position: absolute; width: 5px; height: 5px; top: -5px; left: -5px; box-shadow: 65px 5px #5b9bd5, 55px 10px #5b9bd5, 60px 10px #5b9bd5, 70px 10px #5b9bd5, 40px 15px #5b9bd5, 45px 15px #5b9bd5, 50px 15px #5b9bd5, 75px 15px #5b9bd5, 30px 20px #5b9bd5, 35px 20px #5b9bd5, 80px 20px #5b9bd5, 20px 25px #5b9bd5, 25px 25px #5b9bd5, 85px 25px #5b9bd5, 90px 25px #5b9bd5, 15px 30px #5b9bd5, 95px 30px #5b9bd5, 10px 35px #5b9bd5, 100px 35px #5b9bd5, 10px 40px #5b9bd5, 100px 40px #5b9bd5, 5px 45px #5b9bd5, 105px 45px #5b9bd5, 5px 50px #5b9bd5, 105px 50px #5b9bd5, 5px 55px #5b9bd5, 105px 55px #5b9bd5, 5px 60px #5b9bd5, 105px 60px #5b9bd5, 5px 65px #5b9bd5, 105px 65px #5b9bd5, 5px 70px #5b9bd5, 105px 70px #5b9bd5, 10px 75px #5b9bd5, 100px 75px #5b9bd5, 10px 80px #5b9bd5, 100px 80px #5b9bd5, 15px 85px #5b9bd5, 95px 85px #5b9bd5, 20px 90px #5b9bd5, 25px 90px #5b9bd5, 85px 90px #5b9bd5, 90px 90px #5b9bd5, 30px 95px #5b9bd5, 35px 95px #5b9bd5, 75px 95px #5b9bd5, 80px 95px #5b9bd5, 40px 100px #5b9bd5, 45px 100px #5b9bd5, 50px 100px #5b9bd5, 55px 100px #5b9bd5, 60px 100px #5b9bd5, 65px 100px #5b9bd5, 70px 100px #5b9bd5, 65px 10px #ddebf7, 55px 15px #ddebf7, 60px 15px #ddebf7, 70px 15px #ddebf7, 50px 20px #ddebf7, 75px 20px #ddebf7, 80px 25px #ddebf7, 85px 30px #ddebf7, 90px 30px #ddebf7, 15px 35px #ddebf7, 100px 55px #ddebf7, 100px 60px #ddebf7, 85px 65px #ddebf7, 15px 60px #ddebf7, 40px 20px #f2f7fc, 45px 20px #f2f7fc, 30px 25px #f2f7fc, 35px 25px #f2f7fc, 20px 30px #f2f7fc, 25px 30px #f2f7fc, 95px 35px #f2f7fc, 95px 40px #f2f7fc, 100px 45px #f2f7fc, 100px 50px #f2f7fc, 25px 50px #f2f7fc, 20px 60px #f2f7fc, 70px 55px #f2f7fc, 80px 65px #f2f7fc, 65px 15px #bdd7ee, 55px 20px #bdd7ee, 60px 20px #bdd7ee, 65px 20px #bdd7ee, 70px 20px #bdd7ee, 40px 25px #bdd7ee, 45px 25px #bdd7ee, 50px 25px #bdd7ee, 55px 25px #bdd7ee, 60px 25px #bdd7ee, 65px 25px #bdd7ee, 70px 25px #bdd7ee, 75px 25px #bdd7ee, 30px 30px #bdd7ee, 35px 30px #bdd7ee, 40px 30px #bdd7ee, 45px 30px #bdd7ee, 50px 30px #bdd7ee, 55px 30px #bdd7ee, 60px 30px #bdd7ee, 65px 30px #bdd7ee, 70px 30px #bdd7ee, 75px 30px #bdd7ee, 80px 30px #bdd7ee, 20px 35px #bdd7ee, 25px 35px #bdd7ee, 30px 35px #bdd7ee, 35px 35px #bdd7ee, 40px 35px #bdd7ee, 45px 35px #bdd7ee, 50px 35px #bdd7ee, 55px 35px #bdd7ee, 60px 35px #bdd7ee, 65px 35px #bdd7ee, 70px 35px #bdd7ee, 75px 35px #bdd7ee, 80px 35px #bdd7ee, 85px 35px #bdd7ee, 90px 35px #bdd7ee, 15px 40px #bdd7ee, 20px 40px #bdd7ee, 25px 40px #bdd7ee, 30px 40px #bdd7ee, 35px 40px #bdd7ee, 40px 40px #bdd7ee, 45px 40px #bdd7ee, 50px 40px #bdd7ee, 55px 40px #bdd7ee, 60px 40px #bdd7ee, 65px 40px #bdd7ee, 70px 40px #bdd7ee, 75px 40px #bdd7ee, 80px 40px #bdd7ee, 85px 40px #bdd7ee, 90px 40px #bdd7ee, 10px 45px #bdd7ee, 15px 45px #bdd7ee, 20px 45px #bdd7ee, 25px 45px #bdd7ee, 30px 45px #bdd7ee, 90px 45px #bdd7ee, 95px 45px #bdd7ee, 10px 50px #bdd7ee, 15px 50px #bdd7ee, 20px 50px #bdd7ee, 95px 50px #bdd7ee, 10px 55px #bdd7ee, 15px 55px #bdd7ee, 10px 60px #bdd7ee, 10px 65px #bdd7ee, 10px 70px #bdd7ee, 15px 75px #bdd7ee, 15px 80px #bdd7ee, 20px 85px #bdd7ee, 25px 85px #bdd7ee, 30px 90px #bdd7ee, 35px 90px #bdd7ee, 100px 65px #bdd7ee, 100px 70px #bdd7ee, 95px 75px #bdd7ee, 95px 80px #bdd7ee, 85px 85px #bdd7ee, 90px 85px #bdd7ee, 75px 90px #bdd7ee, 80px 90px #bdd7ee, 40px 95px #bdd7ee, 45px 95px #bdd7ee, 50px 95px #bdd7ee, 55px 95px #bdd7ee, 60px 95px #bdd7ee, 65px 95px #bdd7ee, 70px 95px #bdd7ee, 20px 55px #b4c6e7, 35px 45px #b4c6e7, 40px 45px #b4c6e7, 45px 45px #b4c6e7, 50px 45px #b4c6e7, 55px 45px #b4c6e7, 60px 45px #b4c6e7, 65px 45px #b4c6e7, 70px 45px #b4c6e7, 75px 45px #b4c6e7, 80px 45px #b4c6e7, 85px 45px #b4c6e7, 35px 50px #b4c6e7, 40px 50px #b4c6e7, 45px 50px #b4c6e7, 50px 50px #b4c6e7, 55px 50px #b4c6e7, 60px 50px #b4c6e7, 65px 50px #b4c6e7, 70px 50px #b4c6e7, 75px 50px #b4c6e7, 80px 50px #b4c6e7, 85px 50px #b4c6e7, 90px 50px #b4c6e7, 35px 55px #b4c6e7, 40px 55px #b4c6e7, 45px 55px #b4c6e7, 50px 55px #b4c6e7, 55px 55px #b4c6e7, 60px 55px #b4c6e7, 65px 55px #b4c6e7, 80px 55px #b4c6e7, 85px 55px #b4c6e7, 90px 55px #b4c6e7, 95px 55px #b4c6e7, 25px 60px #b4c6e7, 30px 60px #b4c6e7, 35px 60px #b4c6e7, 40px 60px #b4c6e7, 45px 60px #b4c6e7, 50px 60px #b4c6e7, 55px 60px #b4c6e7, 60px 60px #b4c6e7, 65px 60px #b4c6e7, 80px 60px #b4c6e7, 85px 60px #b4c6e7, 90px 60px #b4c6e7, 95px 60px #b4c6e7, 15px 65px #b4c6e7, 20px 65px #b4c6e7, 25px 65px #b4c6e7, 30px 65px #b4c6e7, 90px 65px #b4c6e7, 95px 65px #b4c6e7, 15px 70px #b4c6e7, 20px 70px #b4c6e7, 90px 70px #b4c6e7, 95px 70px #b4c6e7, 35px 65px #8ea9db, 40px 65px #8ea9db, 45px 65px #8ea9db, 50px 65px #8ea9db, 55px 65px #8ea9db, 60px 65px #8ea9db, 65px 65px #8ea9db, 70px 65px #8ea9db, 75px 65px #8ea9db, 35px 70px #8ea9db, 40px 70px #8ea9db, 45px 70px #8ea9db, 50px 70px #8ea9db, 55px 70px #8ea9db, 60px 70px #8ea9db, 65px 70px #8ea9db, 70px 70px #8ea9db, 75px 70px #8ea9db, 80px 70px #8ea9db, 85px 70px #8ea9db, 35px 75px #8ea9db, 40px 75px #8ea9db, 25px 70px #8ea9db, 20px 75px #8ea9db, 25px 75px #8ea9db, 20px 80px #8ea9db, 25px 80px #8ea9db, 30px 80px #8ea9db, 50px 75px #8ea9db, 55px 75px #8ea9db, 65px 75px #8ea9db, 70px 75px #8ea9db, 75px 75px #8ea9db, 80px 75px #8ea9db, 85px 75px #8ea9db, 90px 75px #8ea9db, 45px 80px #8ea9db, 60px 80px #8ea9db, 65px 80px #8ea9db, 70px 80px #8ea9db, 75px 80px #8ea9db, 80px 80px #8ea9db, 85px 80px #8ea9db, 90px 80px #8ea9db, 30px 85px #8ea9db, 35px 85px #8ea9db, 40px 85px #8ea9db, 45px 85px #8ea9db, 50px 85px #8ea9db, 55px 85px #8ea9db, 60px 85px #8ea9db, 65px 85px #8ea9db, 70px 85px #8ea9db, 75px 85px #8ea9db, 80px 85px #8ea9db, 40px 90px #8ea9db, 45px 90px #8ea9db, 50px 90px #8ea9db, 55px 90px #8ea9db, 60px 90px #8ea9db, 65px 90px #8ea9db, 70px 90px #8ea9db, 30px 70px #f8cbad, 30px 75px #f8cbad, 35px 80px #f8cbad, 40px 80px #f8cbad, 45px 75px #f8cbad, 50px 80px #f8cbad, 55px 80px #f8cbad, 60px 75px #f8cbad, 30px 50px #404040, 25px 55px #404040, 30px 55px #404040, 75px 55px #404040, 70px 60px #404040, 75px 60px #404040; } .pixel-orange { height: 115px; width: 95px; position: relative; display: inline-block; margin: 20px; } .pixel-orange::before { content: \"\"; position: absolute; width: 5px; height: 5px; top: -5px; left: -5px; box-shadow: 50px 5px #70ad47, 45px 10px #70ad47, 50px 10px #70ad47, 45px 15px #70ad47, 50px 15px #70ad47, 40px 20px #70ad47, 45px 20px #70ad47, 50px 20px #70ad47, 40px 25px #70ad47, 45px 25px #70ad47, 50px 25px #70ad47, 45px 30px #70ad47, 5px 60px #ed7d31, 5px 65px #ed7d31, 5px 70px #ed7d31, 5px 75px #ed7d31, 10px 50px #ed7d31, 10px 55px #ed7d31, 10px 60px #ed7d31, 10px 75px #ed7d31, 10px 80px #ed7d31, 10px 85px #ed7d31, 15px 40px #ed7d31, 15px 45px #ed7d31, 15px 50px #ed7d31, 15px 85px #ed7d31, 15px 90px #ed7d31, 15px 95px #ed7d31, 20px 35px #ed7d31, 20px 40px #ed7d31, 20px 45px #ed7d31, 20px 95px #ed7d31, 20px 100px #ed7d31, 25px 30px #ed7d31, 25px 35px #ed7d31, 25px 40px #ed7d31, 25px 100px #ed7d31, 25px 105px #ed7d31, 30px 30px #ed7d31, 30px 35px #ed7d31, 30px 105px #ed7d31, 35px 35px #ed7d31, 35px 40px #ed7d31, 35px 105px #ed7d31, 35px 110px #ed7d31, 40px 40px #ed7d31, 40px 105px #ed7d31, 40px 110px #ed7d31, 45px 40px #ed7d31, 45px 105px #ed7d31, 45px 110px #ed7d31, 45px 115px #ed7d31, 50px 30px #ed7d31, 50px 35px #ed7d31, 50px 40px #ed7d31, 50px 100px #ed7d31, 50px 105px #ed7d31, 50px 110px #ed7d31, 50px 115px #ed7d31, 55px 25px #ed7d31, 55px 30px #ed7d31, 55px 35px #ed7d31, 55px 100px #ed7d31, 55px 105px #ed7d31, 55px 110px #ed7d31, 55px 115px #ed7d31, 60px 25px #ed7d31, 60px 30px #ed7d31, 60px 95px #ed7d31, 60px 100px #ed7d31, 60px 105px #ed7d31, 60px 110px #ed7d31, 65px 25px #ed7d31, 65px 30px #ed7d31, 65px 95px #ed7d31, 65px 100px #ed7d31, 65px 105px #ed7d31, 65px 110px #ed7d31, 70px 30px #ed7d31, 70px 35px #ed7d31, 70px 90px #ed7d31, 70px 95px #ed7d31, 70px 100px #ed7d31, 70px 105px #ed7d31, 75px 30px #ed7d31, 75px 35px #ed7d31, 75px 40px #ed7d31, 75px 85px #ed7d31, 75px 90px #ed7d31, 75px 95px #ed7d31, 75px 100px #ed7d31, 75px 105px #ed7d31, 80px 35px #ed7d31, 80px 40px #ed7d31, 80px 45px #ed7d31, 80px 75px #ed7d31, 80px 80px #ed7d31, 80px 85px #ed7d31, 80px 90px #ed7d31, 80px 95px #ed7d31, 80px 100px #ed7d31, 85px 40px #ed7d31, 85px 45px #ed7d31, 85px 50px #ed7d31, 85px 70px #ed7d31, 85px 75px #ed7d31, 85px 80px #ed7d31, 85px 85px #ed7d31, 85px 90px #ed7d31, 85px 95px #ed7d31, 90px 50px #ed7d31, 90px 55px #ed7d31, 90px 60px #ed7d31, 90px 65px #ed7d31, 90px 70px #ed7d31, 90px 75px #ed7d31, 90px 80px #ed7d31, 90px 85px #ed7d31, 25px 10px #833c0c, 25px 15px #833c0c, 30px 20px #833c0c, 30px 25px #833c0c, 35px 25px #833c0c, 35px 30px #833c0c, 40px 30px #833c0c, 40px 35px #833c0c, 45px 35px #833c0c, 95px 60px #ed7d31, 95px 65px #ed7d31, 95px 70px #ed7d31, 95px 75px #ed7d31, 25px 55px #f8cbad, 25px 60px #f8cbad, 25px 65px #f8cbad, 25px 70px #f8cbad, 30px 50px #f8cbad, 30px 55px #f8cbad, 30px 60px #f8cbad, 30px 65px #f8cbad, 60px 35px #f19b61, 65px 35px #f19b61, 50px 40px #f19b61, 55px 40px #f19b61, 60px 40px #f19b61, 65px 40px #f19b61, 70px 40px #f19b61, 30px 40px #f19b61, 25px 45px #f19b61, 30px 45px #f19b61, 35px 45px #f19b61, 40px 45px #f19b61, 45px 45px #f19b61, 50px 45px #f19b61, 55px 45px #f19b61, 60px 45px #f19b61, 65px 45px #f19b61, 70px 45px #f19b61, 75px 45px #f19b61, 20px 50px #f19b61, 40px 50px #f19b61, 45px 50px #f19b61, 50px 50px #f19b61, 55px 50px #f19b61, 60px 50px #f19b61, 65px 50px #f19b61, 70px 50px #f19b61, 75px 50px #f19b61, 80px 50px #f19b61, 15px 55px #f19b61, 15px 60px #f19b61, 15px 65px #f19b61, 15px 70px #f19b61, 15px 75px #f19b61, 15px 80px #f19b61, 10px 65px #f19b61, 10px 70px #f19b61, 50px 55px #f19b61, 55px 55px #f19b61, 60px 55px #f19b61, 65px 55px #f19b61, 70px 55px #f19b61, 75px 55px #f19b61, 80px 55px #f19b61, 85px 55px #f19b61, 55px 60px #f19b61, 60px 60px #f19b61, 65px 60px #f19b61, 70px 60px #f19b61, 75px 60px #f19b61, 80px 60px #f19b61, 85px 60px #f19b61, 60px 65px #f19b61, 65px 65px #f19b61, 70px 65px #f19b61, 75px 65px #f19b61, 80px 65px #f19b61, 85px 65px #f19b61, 60px 70px #f19b61, 65px 70px #f19b61, 70px 70px #f19b61, 75px 70px #f19b61, 80px 70px #f19b61, 55px 75px #f19b61, 60px 75px #f19b61, 65px 75px #f19b61, 70px 75px #f19b61, 75px 75px #f19b61, 45px 80px #f19b61, 50px 80px #f19b61, 55px 80px #f19b61, 60px 80px #f19b61, 65px 80px #f19b61, 70px 80px #f19b61, 75px 80px #f19b61, 40px 85px #f19b61, 45px 85px #f19b61, 50px 85px #f19b61, 55px 85px #f19b61, 60px 85px #f19b61, 65px 85px #f19b61, 70px 85px #f19b61, 20px 80px #f19b61, 20px 85px #f19b61, 20px 90px #f19b61, 25px 85px #f19b61, 25px 90px #f19b61, 25px 95px #f19b61, 30px 90px #f19b61, 35px 90px #f19b61, 40px 90px #f19b61, 45px 90px #f19b61, 50px 90px #f19b61, 55px 90px #f19b61, 60px 90px #f19b61, 65px 90px #f19b61, 30px 95px #f19b61, 35px 95px #f19b61, 40px 95px #f19b61, 45px 95px #f19b61, 50px 95px #f19b61, 55px 95px #f19b61, 30px 100px #f19b61, 35px 100px #f19b61, 40px 100px #f19b61, 45px 100px #f19b61, 25px 50px #f4b084, 35px 50px #f4b084, 20px 55px #f4b084, 20px 60px #f4b084, 20px 65px #f4b084, 20px 70px #f4b084, 20px 75px #f4b084, 35px 55px #f4b084, 40px 55px #f4b084, 45px 55px #f4b084, 35px 60px #f4b084, 40px 60px #f4b084, 45px 60px #f4b084, 50px 60px #f4b084, 35px 65px #f4b084, 40px 65px #f4b084, 45px 65px #f4b084, 50px 65px #f4b084, 55px 65px #f4b084, 30px 70px #f4b084, 35px 70px #f4b084, 40px 70px #f4b084, 45px 70px #f4b084, 50px 70px #f4b084, 55px 70px #f4b084, 25px 75px #f4b084, 30px 75px #f4b084, 35px 75px #f4b084, 40px 75px #f4b084, 45px 75px #f4b084, 50px 75px #f4b084, 25px 80px #f4b084, 30px 80px #f4b084, 35px 80px #f4b084, 40px 80px #f4b084, 45px 80px #f4b084, 30px 85px #f4b084, 35px 85px #f4b084; }"}],"posts":[{"title":"构建自己的简单微服务架构","slug":"构建自己的简单微服务架构","date":"2020-07-06T15:36:34.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"构建自己的简单微服务架构.html","link":"","permalink":"https://zcheng.site/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AE%80%E5%8D%95%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.html","excerpt":"","text":"总体介绍随着业务需求的快速发展变化，需求不断增长，迫切需要一种更加快速高效的软件交付方式。微服务可以弥补单体应用不足，是一种更加快速高效软件架构风格。单体应用被分解成多个更小的服务，每个服务有自己的独立模块，单独部署，然后共同组成一个应用程序。把范围限定到单个独立业务模块功能。分布式部署在各台服务器上。本篇我们将介绍如何使用.NET Core打造自己的微服务架构。 注意：微服务架构不是万能药，本篇仅供参考和探讨。对于大部分小项目来说，请不要为了微服务而微服务。毕竟技术不是万能的，技术是为业务服务的。 微服务架构的好处 单个服务很容易开发、理解和维护。 每个服务都可以有专门开发团队来开发。 每个微服务独立的部署。 每个服务独立扩展。 微服务架构的不足（这个时候就需要用到服务发现） 微服务应用是分布式系统，由此会带来固有的复杂性。 服务地址目录，服务健康度，部署困难，服务依赖问题，数据库分区问题。 传统模式 Ocelot（网关）模式 集成IdentityService（认证） 集成consul（服务发现） 搭建一个简单的微服务架构OcelotOcelot 是一个仅适用于 .Net Core 的网关组件。Ocelot中间件使用非常简单，难的点在于如何去配置。它的功能包括了：路由、请求聚合、服务发现、认证、鉴权、限流熔断、并内置了负载均衡器等的集成，而这些功能都是通过配置实现。 Ocelot的开源地址：https://github.com/ThreeMammals/Ocelot Ocelot官网地址：https://ocelot.readthedocs.io/en/latest/index.html 基本集成 添加Ocelot新建一个 .Net core 2.2 web 项目（ApiGateway），添加以下Nuget包： Ocelot Ocelot.Administration Ocelot支持在运行时通过经过身份验证的HTTPAPI更改配置。这可以通过两种方式进行身份验证：使用Ocelot的内部IdentityServer（仅用于验证对管理API的请求）或将管理API身份验证挂钩到您自己的IdentityServer中。 Ocelot.Cache.CacheManager CacheManager.Net扩展包 Ocelot.Provider.Polly Polly.NET扩展包 在项目根目录添加ocelot.json，名字可以自取。 前面说了，所有功能都是通过配置实现的，所以配置也相对复杂。配置有两个部分。一组ReRoutes和一个GlobalConfiguration。ReRoutes是告诉Ocelot如何处理上游请求的对象。GlobalConfiguration顾名思义是全局配置，具体配置请查看官网。下面列举简单配置 1234567891011121314151617181920212223242526272829&#123; &quot;GlobalConfiguration&quot;: &#123; //外部访问路径 &quot;BaseUrl&quot;: &quot;http://localhost:13000&quot;, //限速配置 &quot;RateLimitOptions&quot;: &#123; //白名单 &quot;ClientWhitelist&quot;: [], &quot;EnableRateLimiting&quot;: true, //限制时间段，例如1s，5m，1h，1d &quot;Period&quot;: &quot;1s&quot;, //重试等待的时间间隔（秒） &quot;PeriodTimespan&quot;: 1, //限制 &quot;Limit&quot;: 1, //自定义消息 &quot;QuotaExceededMessage&quot;: &quot;单位时间内请求次数超过限制！&quot;, &quot;HttpStatusCode&quot;: 999 &#125;, //熔断配置 &quot;QoSOptions&quot;: &#123; &quot;ExceptionsAllowedBeforeBreaking&quot;: 3, &quot;DurationOfBreak&quot;: 5, //超时值(毫秒) &quot;TimeoutValue&quot;: 5000 &#125; &#125;, &quot;ReRoutes&quot;: []&#125; 配置文件初始化好之后，需要在Program.cs文件中加载JSON配置，Ocelot支持根据环境变量使用配置文件。 1234567891011121314151617181920212223242526272829303132333435public class Program&#123; public static void Main(string[] args) &#123; CreateWebHostBuilder(args).Build().Run(); &#125; public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt; new WebHostBuilder() .UseKestrel((context, opt) =&gt; &#123; opt.AddServerHeader = false; ////从配置文件读取配置 //opt.Configure(context.Configuration.GetSection(&quot;Kestrel&quot;)); &#125;) .UseContentRoot(Directory.GetCurrentDirectory()) .ConfigureAppConfiguration((hostingContext, config) =&gt; &#123; var env = hostingContext.HostingEnvironment; //根据环境变量加载不同的JSON配置 config.AddJsonFile(&quot;appsettings.json&quot;, optional: true, reloadOnChange: true) .AddJsonFile($&quot;appsettings.&#123;env.EnvironmentName&#125;.json&quot;, optional: true, reloadOnChange: true) .AddJsonFile(&quot;ocelot.json&quot;) .AddEnvironmentVariables(); //从环境变量添加配置 &#125;) .UseIISIntegration() .ConfigureLogging((hostingContext, logging) =&gt; &#123; logging.AddConfiguration(hostingContext.Configuration.GetSection(&quot;Logging&quot;)); //添加控制台日志,Docker环境下请务必启用 logging.AddConsole(); //添加调试日志 logging.AddDebug(); &#125;) .UseStartup&lt;Startup&gt;();&#125; 然后在Startup.cs文件ConfigureServices方法中注册服务时使用AddOcelot()，Configure方法中使用app.UseOcelot().Wait(); 这样网关的配置就完成了。 123services.AddOcelot(Configuration)app.UseOcelot().Wait(); 添加测试API项目新建两个 .Net core 2.2 web项目（vs 自建的那种就OK），并使用Swagger来做接口说明。 Nuget 添加 Swashbuckle.AspNetCore 和Microsoft.Extensions.PlatformAbstractions 实现Swagger ui，代码如下 1234567891011121314151617181920212223242526272829public void ConfigureServices(IServiceCollection services)&#123; services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2); services.AddSwaggerGen(options =&gt; &#123; options.SwaggerDoc(&quot;SwaggerAPI1&quot;, new Info &#123; Title = &quot;API1&quot;, Version = &quot;v1&quot; &#125;); var basePath = PlatformServices.Default.Application.ApplicationBasePath; var xmlPath = Path.Combine(basePath, &quot;Services.Test1.xml&quot;); options.IncludeXmlComments(xmlPath); &#125;); //服务注册 //services.Configure&lt;ServiceRegistrationOptions&gt;&#125;// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.public void Configure(IApplicationBuilder app, IHostingEnvironment env)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.UseSwagger(c =&gt; &#123; c.RouteTemplate = &quot;&#123;documentName&#125;/swagger.json&quot;; &#125;); app.UseSwaggerUI(c =&gt; &#123; c.SwaggerEndpoint(&quot;/SwaggerAPI1/swagger.json&quot;, &quot;API1&quot;); &#125;); app.UseMvc();&#125; 项目.csproj文件中设置XML文档输出路径 Services.Test1 和 Services.Test2一样的配置，略过。编译启动，页面如下，接口配置完成。 配置项目的上游请求对象（ocelot.json）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&quot;ReRoutes&quot;: [ //API1项目配置 &#123; &quot;UpstreamPathTemplate&quot;: &quot;/gateway/1/&#123;url&#125;&quot;, &quot;UpstreamHttpMethod&quot;: [ &quot;Get&quot;, &quot;Post&quot;, &quot;Delete&quot;, &quot;Put&quot; ], &quot;DownstreamPathTemplate&quot;: &quot;/api1/&#123;url&#125;&quot;, &quot;DownstreamScheme&quot;: &quot;http&quot;, &quot;ServiceName&quot;: &quot;API1&quot;, &quot;UseServiceDiscovery&quot;: true, &quot;LoadBalancer&quot;: &quot;RoundRobin&quot;, &quot;DownstreamHostAndPorts&quot;: [ &#123; &quot;Host&quot;: &quot;119.29.50.115&quot;, &quot;Port&quot;: 80 &#125;, &#123; &quot;Host&quot;: &quot;localhost&quot;, &quot;Port&quot;: 13001 &#125; ], &quot;QoSOptions&quot;: &#123; &quot;ExceptionsAllowedBeforeBreaking&quot;: 3, &quot;DurationOfBreak&quot;: 10, &quot;TimeoutValue&quot;: 5000 &#125; //&quot;AuthenticationOptions&quot;: &#123; // &quot;AuthenticationProviderKey&quot;: &quot;Bearer&quot;, // &quot;AllowedScopes&quot;: [ // ] //&#125; &#125;, //API2项目配置 &#123; &quot;UpstreamPathTemplate&quot;: &quot;/gateway/2/&#123;url&#125;&quot;, &quot;UpstreamHttpMethod&quot;: [ &quot;Get&quot;, &quot;Post&quot;, &quot;Delete&quot;, &quot;Put&quot; ], &quot;DownstreamPathTemplate&quot;: &quot;/api2/&#123;url&#125;&quot;, &quot;DownstreamScheme&quot;: &quot;http&quot;, &quot;ServiceName&quot;: &quot;API2&quot;, &quot;UseServiceDiscovery&quot;: true, &quot;LoadBalancer&quot;: &quot;RoundRobin&quot;, &quot;DownstreamHostAndPorts&quot;: [ &#123; &quot;Host&quot;: &quot;111.230.160.62&quot;, &quot;Port&quot;: 80 &#125;, &#123; &quot;Host&quot;: &quot;localhost&quot;, &quot;Port&quot;: 13002 &#125; ], &quot;QoSOptions&quot;: &#123; &quot;ExceptionsAllowedBeforeBreaking&quot;: 3, &quot;DurationOfBreak&quot;: 10, &quot;TimeoutValue&quot;: 5000 &#125; //&quot;AuthenticationOptions&quot;: &#123; // &quot;AuthenticationProviderKey&quot;: &quot;Bearer&quot;, // &quot;AllowedScopes&quot;: [ // ] //&#125; &#125;,] ReRoutes API对象模板配置节点解释如下： UpstreamPathTemplate 上游路径模板 UpstreamHttpMethod 上游HTTP请求方法 DownstreamPathTemplate 下游路径模板 DownstreamScheme 下游协议Https/Http DownstreamHostAndPorts 下游主机和端口号，允许配置多个 UseServiceDiscovery 是否使用服务发现（True/False） ServiceName 服务名称（结合服务发现使用） LoadBalancer 指定一个负载均衡算法： RoundRobin：轮询 LeastConnection：最少连接数 NoLoadBalancer：不适用负载均衡 LoadBalancerOptions 负载均衡器配置 QoSOptions 熔断配置，在请求向下游服务时使用断路 AuthenticationOptions 权限配置 启动结果启动web项目，web页面报错，但无妨，使用PostMan请求网关接口访问api1/TestOnes成功。 聚合API文档（SwaggerUI）前面配置了网关接口上游，但是页面Swagger没有显示，这节主要是整合SwaggerUI。 首先需要配置ApiGateway项目的Swagger，在配置文件配置上面两个接口的SwaggerNames，代码中遍历添加到网关项目的SwaggerUI中,代码如下 ConfigureServices1234services.AddSwaggerGen(options =&gt;&#123; options.SwaggerDoc(Configuration[&quot;Swagger:Name&quot;], new Info &#123; Title = Configuration[&quot;Swagger:Title&quot;], Version = Configuration[&quot;Swagger:Version&quot;] &#125;);&#125;); Configure12345678910111213141516171819public void Configure(IApplicationBuilder app, IHostingEnvironment env)&#123; var apis = Configuration[&quot;Apis:SwaggerNames&quot;].Split(&quot;;&quot;).ToList(); if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.UseMvc() .UseSwagger() .UseSwaggerUI(options =&gt; &#123; apis.ToList().ForEach(key =&gt; &#123; options.SwaggerEndpoint($&quot;/&#123;key&#125;/swagger.json&quot;, key); &#125;); options.DocumentTitle = &quot;网关&quot;; &#125;); app.UseOcelot().Wait();&#125; appsettings.json12345678&quot;Swagger&quot;: &#123; &quot;Name&quot;: &quot;ApiGateway&quot;, &quot;Title&quot;: &quot;网关服务&quot;, &quot;Version&quot;: &quot;v1&quot;&#125;,&quot;Apis&quot;: &#123; &quot;SwaggerNames&quot;: &quot;SwaggerAPI1;SwaggerAPI2&quot;&#125; PS:SwaggerAPI1、SwaggerAPI2是前面两个接口的SwaggerName，这里需要对应上。 配置Swagger的上游请求对象（ocelot.json）12345678910111213141516171819202122232425262728293031323334//swagger API1配置&#123; &quot;DownstreamPathTemplate&quot;: &quot;/SwaggerAPI1/swagger.json&quot;, &quot;DownstreamScheme&quot;: &quot;http&quot;, &quot;UpstreamPathTemplate&quot;: &quot;/SwaggerAPI1/swagger.json&quot;, &quot;UpstreamHttpMethod&quot;: [ &quot;GET&quot;, &quot;POST&quot;, &quot;DELETE&quot;, &quot;PUT&quot; ], &quot;DownstreamHostAndPorts&quot;: [ &#123; &quot;Host&quot;: &quot;119.29.50.115&quot;, &quot;Port&quot;: 80 &#125;, &#123; &quot;Host&quot;: &quot;localhost&quot;, &quot;Port&quot;: 13001 &#125; ]&#125;,//swagger API2配置&#123; &quot;DownstreamPathTemplate&quot;: &quot;/SwaggerAPI2/swagger.json&quot;, &quot;DownstreamScheme&quot;: &quot;http&quot;, &quot;UpstreamPathTemplate&quot;: &quot;/SwaggerAPI2/swagger.json&quot;, &quot;UpstreamHttpMethod&quot;: [ &quot;GET&quot;, &quot;POST&quot;, &quot;DELETE&quot;, &quot;PUT&quot; ], &quot;DownstreamHostAndPorts&quot;: [ &#123; &quot;Host&quot;: &quot;111.230.160.62&quot;, &quot;Port&quot;: 80 &#125;, &#123; &quot;Host&quot;: &quot;localhost&quot;, &quot;Port&quot;: 13002 &#125; ]&#125; 启动结果使用SwaggerUI整合了API1和API2的接口文档。 IdentityServer 集成官网文档地址：http://docs.identityserver.io/en/latest/index.html IdentityServer4是一个基于OpenID Connect和 OAuth 2.0的针对 ASP .NET Core 2.0的框架。 IdentityServer是将规范兼容的OpenID Connect和OAuth 2.0终结点添加到任意ASP .NETCore应用程序的中间件。你构建包含登录和注销页面的应用程序，IdentityServer中间件会向其添加必要的协议头，以便客户端应用程序可以使用这些标准协议与其对话。 添加授权服务项目新建 .Net core 2.2 web项目，添加以下Nuget包： IdentityServer4.AspNetIdentity IdentityServer4.EntityFramework 使用数据存储机制 配置appsetting.json配置测试环境下的客服端信息和Identity API资源配置，具体配置需要按照自己的逻辑定义，这里只是为了结合我下面的IdentityServerConfig文件所定义，代码如下， 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647为了结合我下面的IdentityServerConfig文件所定义，代码如下，&quot;IdentityServer&quot;: &#123; &quot;ApiName&quot;: &quot;default-api&quot;, &quot;ApiSecret&quot;: &quot;secret&quot;, &quot;Clients&quot;: [ &#123; &quot;ClientId&quot;: &quot;client&quot;, &quot;AllowedGrantTypes&quot;: [ &quot;password&quot; ], &quot;ClientSecrets&quot;: [ &#123; &quot;Value&quot;: &quot;def2edf7-5d42-4edc-a84a-30136c340e13&quot; &#125; ], &quot;AllowedScopes&quot;: [ &quot;default-api&quot; ] &#125;, &#123; &quot;ClientId&quot;: &quot;demo&quot;, &quot;ClientName&quot;: &quot;MVC Client Demo&quot;, &quot;AllowedGrantTypes&quot;: [ &quot;hybrid&quot;, &quot;client_credentials&quot; ], &quot;RequireConsent&quot;: &quot;true&quot;, &quot;ClientSecrets&quot;: [ &#123; &quot;Value&quot;: &quot;def2edf7-5d42-4edc-a84a-30136c340e13&quot; &#125; ], &quot;RedirectUris&quot;: [ &quot;http://openidclientdemo.com:8001/signin-oidc&quot; ], &quot;PostLogoutRedirectUris&quot;: [ &quot;http://openidclientdemo.com:8001/signout-callback-oidc&quot; ], &quot;AllowedScopes&quot;: [ &quot;openid&quot;, &quot;profile&quot;, &quot;default-api&quot; ], &quot;AllowOfflineAccess&quot;: &quot;true&quot; &#125; ] &#125; 添加IdentityServerConfig类IdentityServerConfig 类分为三个方法： 定义API资源：1234567891011public static IEnumerable&lt;ApiResource&gt; GetApiResources()&#123; return new List&lt;ApiResource&gt; &#123; new ApiResource(&quot;default-api&quot;, &quot;Default (all) API&quot;) &#123; Description = &quot;AllFunctionalityYouHaveInTheApplication&quot;, ApiSecrets= &#123;new Secret(&quot;secret&quot;) &#125; &#125; &#125;;&#125; 定义身份资源：1234567891011public static IEnumerable&lt;IdentityResource&gt; GetIdentityResources()&#123; return new List&lt;IdentityResource&gt; &#123; new IdentityResources.OpenId(), new IdentityResources.Profile(), new IdentityResources.Email(), new IdentityResources.Phone(), new IdentityResources.Address() &#125;;&#125; 1234567891011121314public static IEnumerable&lt;IdentityResource&gt; GetIdentityResources()&#123; var customProfile = new IdentityResource( name: &quot;custom.profile&quot;, displayName: &quot;Custom profile&quot;, claimTypes: new[] &#123; &quot;name&quot;, &quot;email&quot;, &quot;status&quot; &#125;); return new List&lt;IdentityResource&gt; &#123; new IdentityResources.OpenId(), new IdentityResources.Profile(), customProfile &#125;;&#125; IdentityResource 具体属性 Enabled 指示此资源是否已启用且可以请求。默认为true。 Name 标识资源的唯一名称。这是客户端将用于授权请求中的scope参数的值。 DisplayName 显示名称。 Description 描述。 Required 默认为false。（暂未深究理解） Emphasize 默认为false。（暂未深究理解） ShowInDiscoveryDocument 指定此范围是否显示在发现文档中。默认为true。 UserClaims 应包含在身份令牌中的关联用户声明类型的列表。 定义测试客服端此处则是通过appsetting.json 文件获取配置 12345678910111213141516171819202122public static IEnumerable&lt;Client&gt; GetClients(IConfiguration configuration)&#123; var clients = new List&lt;Client&gt;(); foreach (var child in configuration.GetSection(&quot;IdentityServer:Clients&quot;).GetChildren()) &#123; clients.Add(new Client &#123; ClientId = child[&quot;ClientId&quot;], ClientName = child[&quot;ClientName&quot;], AllowedGrantTypes = child.GetSection(&quot;AllowedGrantTypes&quot;).GetChildren().Select(c =&gt; c.Value).ToArray(), RequireConsent = bool.Parse(child[&quot;RequireConsent&quot;] ?? &quot;false&quot;), AllowOfflineAccess = bool.Parse(child[&quot;AllowOfflineAccess&quot;] ?? &quot;false&quot;), ClientSecrets = child.GetSection(&quot;ClientSecrets&quot;).GetChildren().Select(secret =&gt; new Secret(secret[&quot;Value&quot;].Sha256())).ToArray(), AllowedScopes = child.GetSection(&quot;AllowedScopes&quot;).GetChildren().Select(c =&gt; c.Value).ToArray(), RedirectUris = child.GetSection(&quot;RedirectUris&quot;).GetChildren().Select(c =&gt; c.Value).ToArray(), PostLogoutRedirectUris = child.GetSection(&quot;PostLogoutRedirectUris&quot;).GetChildren().Select(c =&gt; c.Value).ToArray(), &#125;); &#125; return clients;&#125; 配置StartupConfigureServices这里只是用作测试，所以没有在数据库中读取配置，而是在内存中获取。相应的数据库读取方法也有说明。 12345678910111213141516171819202122232425262728293031323334353637383940public void ConfigureServices(IServiceCollection services)&#123; //var connectionString = Configuration.GetConnectionString(&quot;Default&quot;); //services.AddDbContext&lt;MagicodesAdminContext&gt;(options =&gt; options.UseSqlServer(connectionString)); //services.AddIdentity&lt;AbpUsers, AbpRoles&gt;() // .AddEntityFrameworkStores&lt;MagicodesAdminContext&gt;() // .AddDefaultTokenProviders(); services.AddIdentityServer() .AddDeveloperSigningCredential() .AddInMemoryPersistedGrants() .AddInMemoryIdentityResources(IdentityServerConfig.GetIdentityResources()) .AddInMemoryApiResources(IdentityServerConfig.GetApiResources()) .AddInMemoryClients(IdentityServerConfig.GetClients(Configuration)) //.AddAspNetIdentity&lt;AbpUsers&gt;() //从数据库读取配置等内容(clients, resources) //.AddConfigurationStore(options =&gt; //&#123; // options.ConfigureDbContext = b =&gt; // b.UseSqlServer(connectionString); //&#125;) // this adds the operational data from DB (codes, tokens, consents) //.AddOperationalStore(options =&gt; //&#123; // options.ConfigureDbContext = b =&gt; // b.UseSqlServer(connectionString); // options.PersistedGrants.Name = &quot;AbpPersistedGrants&quot;; // //options.DeviceFlowCodes.Name = // // this enables automatic token cleanup. this is optional. // options.EnableTokenCleanup = true; //&#125;); //.AddAspNetIdentity() //.AddAbpPersistedGrants&lt;AdminDbContext&gt;() //.AddAbpIdentityServer&lt;User&gt;(); ;&#125; Configure123456789public void Configure(IApplicationBuilder app, IHostingEnvironment env)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.UseIdentityServer();&#125; 启动结果就这样可以启动服务了，浏览器启动会显示如下页面，因为没有任何页面启动，所为显示为404。 但无妨，我们可以使用PostMan 访问： http://localhost:13004/.well-known/openid-configuration 你会看到官方所谓的发现文档。客户端和API将使用它来下载必要的配置数据。到此为止IdentityServer服务已经搭建成功！ 首次启动时，IdentityServer将为您创建一个开发人员签名密钥，它是一个名为的文件。您不必将该文件检入源代码管理中，如果该文件不存在，将重新创建该文件。tempkey.rsa 配置ApiGateway网关项目在前面Ocelot章节中，配置了ocelot.json，这里继续修改ocelot.json文件，启用权限认证 12345678910111213141516171819202122232425262728293031&#123; &quot;UpstreamPathTemplate&quot;: &quot;/gateway/1/&#123;url&#125;&quot;, &quot;UpstreamHttpMethod&quot;: [ &quot;Get&quot;, &quot;Post&quot;, &quot;Delete&quot;, &quot;Put&quot; ], &quot;DownstreamPathTemplate&quot;: &quot;/api1/&#123;url&#125;&quot;, &quot;DownstreamScheme&quot;: &quot;http&quot;, &quot;ServiceName&quot;: &quot;API1&quot;, &quot;UseServiceDiscovery&quot;: true, &quot;LoadBalancer&quot;: &quot;RoundRobin&quot;, &quot;DownstreamHostAndPorts&quot;: [ &#123; &quot;Host&quot;: &quot;119.29.50.115&quot;, &quot;Port&quot;: 80 &#125;, &#123; &quot;Host&quot;: &quot;localhost&quot;, &quot;Port&quot;: 13001 &#125; ], &quot;QoSOptions&quot;: &#123; &quot;ExceptionsAllowedBeforeBreaking&quot;: 3, &quot;DurationOfBreak&quot;: 10, &quot;TimeoutValue&quot;: 5000 &#125; //启用权限认证 &quot;AuthenticationOptions&quot;: &#123; &quot;AuthenticationProviderKey&quot;: &quot;IdentityBearer&quot;, &quot;AllowedScopes&quot;: [ ] &#125;&#125; 然后还需要在ApiGateway项目中修改appsetting.json文件，添加IdentityService服务配置。 1234567&quot;IdentityService&quot;: &#123; &quot;Uri&quot;: &quot;http://localhost:13004&quot;,//认证服务IP &quot;DefaultScheme&quot;: &quot;IdentityBearer&quot;, &quot;UseHttps&quot;: false, &quot;ApiName&quot;: &quot;default-api&quot;, &quot;ApiSecret&quot;: &quot;def2edf7-5d42-4edc-a84a-30136c340e13&quot;&#125; 接下来就是配置 ApiGateway项目 Startup文件了。 需要引入Nuget包：IdentityServer4.AccessTokenValidation 1234567891011121314151617181920212223242526public void ConfigureServices(IServiceCollection services)&#123; //Identity Server Bearer Tokens Action&lt;IdentityServerAuthenticationOptions&gt; isaOpt = option =&gt; &#123; option.Authority = Configuration[&quot;IdentityService:Uri&quot;]; option.RequireHttpsMetadata = Convert.ToBoolean(Configuration[&quot;IdentityService:UseHttps&quot;]); option.ApiName = Configuration[&quot;IdentityService:ApiName&quot;]; option.ApiSecret = Configuration[&quot;IdentityService:ApiSecret&quot;]; option.SupportedTokens = SupportedTokens.Both; &#125;; services.AddAuthentication().AddIdentityServerAuthentication(Configuration[&quot;IdentityService:DefaultScheme&quot;], isaOpt); services .AddOcelot(Configuration) //启用缓存 .AddCacheManager(x =&gt; &#123; x.WithDictionaryHandle(); &#125;) .AddPolly() services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2); ; services.AddSwaggerGen(options =&gt; &#123; options.SwaggerDoc(Configuration[&quot;Swagger:Name&quot;], new Info &#123; Title = Configuration[&quot;Swagger:Title&quot;], Version = Configuration[&quot;Swagger:Version&quot;] &#125;); &#125;);&#125; 配置完成后启用Service.Test1、Service.Test2、ApiGateway、IdentityService项目。使用SwaggerUI请求会提示401Unauthorized，这个时候IdentityService就起到作用了。 使用PostMan去请求IdentityService获取token 使用token访问接口，数据返回正常 调用Ocelot管理API通过IdentityServer 身份验证来调用Ocelot 管理接口。 首先需要做的是引入相关的NuGet包：Install-Package Ocelot.Administration 修改 ApiGateway项目 Startup文件 添加代码.AddAdministration(“/administration”, isaOpt);路径名称可自取。 123456789101112131415161718192021222324252627public void ConfigureServices(IServiceCollection services)&#123; //Identity Server Bearer Tokens Action&lt;IdentityServerAuthenticationOptions&gt; isaOpt = option =&gt; &#123; option.Authority = Configuration[&quot;IdentityService:Uri&quot;]; option.RequireHttpsMetadata = Convert.ToBoolean(Configuration[&quot;IdentityService:UseHttps&quot;]); option.ApiName = Configuration[&quot;IdentityService:ApiName&quot;]; option.ApiSecret = Configuration[&quot;IdentityService:ApiSecret&quot;]; option.SupportedTokens = SupportedTokens.Both; &#125;; services.AddAuthentication().AddIdentityServerAuthentication(Configuration[&quot;IdentityService:DefaultScheme&quot;], isaOpt); services .AddOcelot(Configuration) //启用缓存 .AddCacheManager(x =&gt; &#123; x.WithDictionaryHandle(); &#125;) .AddPolly() .AddAdministration(&quot;/administration&quot;, isaOpt); services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2); ; services.AddSwaggerGen(options =&gt; &#123; options.SwaggerDoc(Configuration[&quot;Swagger:Name&quot;], new Info &#123; Title = Configuration[&quot;Swagger:Title&quot;], Version = Configuration[&quot;Swagger:Version&quot;] &#125;); &#125;);&#125; API方法POST {adminPath} / connect / token 获取token 请求的主体是表单数据，如下所示 client_id 设为管理员 *client_secret *设置为设置管理服务时使用的任何内容。 scope 设为管理员 grant_type 设置为client_credentials 获取{adminPath} /configuration 获得当前的Ocelot配置。 POST {adminPath} / configuration 这会覆盖现有配置。 请求的主体是JSON，它与我们用于在文件系统上设置Ocelot.json格式相同。 如果要使用此API，则运行Ocelot的进程必须具有写入ocelot.json或ocelot.{environment}.json所在磁盘的权限。这是因为Ocelot会在保存时覆盖它们。 删除{adminPath} / outputcache / {region} 清除所有缓存区域 Consul（服务发现）官网地址：https://www.consul.io/ Consul包含多个组件,但是作为一个整体，提供服务发现和服务配置的工具。 主要特性： 服务发现组件记录了分布式系统中所有服务的信息，其它服务可以据此找到这些服务。 健康检查 Consul 客户端可用提供任意数量的健康检查。 Key/Value存储 应用程序可用根据自己的需要使用 Consul 的层级的 Key/Value存储。 多数据中心Consul支持开箱即用的多数据中心。这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域。 这里框架主要介绍服务发现和健康检查。 本地部署下载相应版本consul软件包，下载地址：https://www.consul.io/downloads.html，以下内容为windows讲解。承接上面的网关项目，整合Consul。 安装 解压完成，只有一个consul.exe，别慌，确实就只有一个文件。 管理员运行CMD ，CD 到consul 文件夹，直接运行 consul命令，出现如下页面，则配置成功 添加服务配置添加服务注册配置文件，在consul.exe同级目录下添加config（名字可自取）文件夹，在config文件夹中创建service.json（名字可自取）文件，用来注册服务和服务检查配置。如图所示： 配置service.json，代码如下： 123456789101112131415161718&#123; &quot;services&quot;: [ &#123; &quot;id&quot;: &quot;API1&quot;,//唯一标识 &quot;name&quot;: &quot;API1&quot;,//服务名称 &quot;tags&quot;: [ &quot;API1&quot; ],//服务标签 &quot;address&quot;: &quot;172.0.0.1&quot;,//我随便配的IP，注意配置服务的真实IP和port &quot;port&quot;: 80 &#125;, &#123; &quot;id&quot;: &quot;API2&quot;, &quot;name&quot;: &quot;API2&quot;, &quot;tags&quot;: [ &quot;API2&quot; ], &quot;address&quot;: &quot;172.0.0.1&quot;,//我随便配的IP,注意配置服务的真实IP和port &quot;port&quot;: 81 &#125; ]&#125; 这样服务注册配置就OK了，接下来使用配置启动Consul，下面是几种形式启动consul，详细的命令参数可以移步到官方文档查看。 以开发模式启动 consul agent -dev -config-dir=./config 以服务方式启动 consul agent -server -bootstrap-expect 2 -data-dir./tmp/consul -node=n1 -bind=192.168.109.241 -ui-dir ./dist -dc=dc1 以客户端方式启动 consul agent -data-dir ./tmp/consul -ui-dir ./dist-bind=192.168.109.204 -dc=dc1 开发模式启动如下，在输出窗口中可以看到consul ui HTTP 启动路径为127.0.0.1:8500 ，注册了API 和 API2 两个服务。 浏览器访问 127.0.0.1:8500 ，可以看到Consul UI页面 添加检查配置需要查看服务的运行状态是否健康，就需要配置检查。具体检查配置移步官方文档。 检查定义有一下几种： 脚本检查： 123456789&#123; &quot;check&quot;: &#123; &quot;id&quot;: &quot;mem-util&quot;, &quot;name&quot;: &quot;Memory utilization&quot;, &quot;args&quot;: [&quot;/usr/local/bin/check_mem.py&quot;, &quot;-limit&quot;, &quot;256MB&quot;], &quot;interval&quot;: &quot;10s&quot;, &quot;timeout&quot;: &quot;1s&quot; &#125;&#125; HTTP检查： 123456789101112&#123; &quot;check&quot;: &#123; &quot;id&quot;: &quot;api&quot;, &quot;name&quot;: &quot;HTTP API on port 5000&quot;, &quot;http&quot;: &quot;https://localhost:5000/health&quot;, &quot;tls_skip_verify&quot;: false, &quot;method&quot;: &quot;POST&quot;, &quot;header&quot;: &#123;&quot;x-foo&quot;:[&quot;bar&quot;, &quot;baz&quot;]&#125;, &quot;interval&quot;: &quot;10s&quot;, &quot;timeout&quot;: &quot;1s&quot; &#125;&#125; TCP检查： 123456789&#123; &quot;check&quot;: &#123; &quot;id&quot;: &quot;ssh&quot;, &quot;name&quot;: &quot;SSH TCP on port 22&quot;, &quot;tcp&quot;: &quot;localhost:22&quot;, &quot;interval&quot;: &quot;10s&quot;, &quot;timeout&quot;: &quot;1s&quot; &#125;&#125; TTL检查： 12345678&#123; &quot;check&quot;: &#123; &quot;id&quot;: &quot;web-app&quot;, &quot;name&quot;: &quot;Web App Status&quot;, &quot;notes&quot;: &quot;Web app does a curl internally every 10 seconds&quot;, &quot;ttl&quot;: &quot;30s&quot; &#125;&#125; Docker检查： 12345678910&#123; &quot;check&quot;: &#123; &quot;id&quot;: &quot;mem-util&quot;, &quot;name&quot;: &quot;Memory utilization&quot;, &quot;docker_container_id&quot;: &quot;f972c95ebf0e&quot;, &quot;shell&quot;: &quot;/bin/bash&quot;, &quot;args&quot;: [&quot;/usr/local/bin/check_mem.py&quot;], &quot;interval&quot;: &quot;10s&quot; &#125;&#125; gRPC检查： 123456789&#123; &quot;check&quot;: &#123; &quot;id&quot;: &quot;mem-util&quot;, &quot;name&quot;: &quot;Service health status&quot;, &quot;grpc&quot;: &quot;127.0.0.1:12345&quot;, &quot;grpc_use_tls&quot;: true, &quot;interval&quot;: &quot;10s&quot; &#125;&#125; 本地服务的别名检查： 123456&#123; &quot;check&quot;: &#123; &quot;id&quot;: &quot;web-alias&quot;, &quot;alias_service&quot;: &quot;web&quot; &#125;&#125; 我这边简单使用了TCP检查， 继续修改service.json文件，检测 tcp为“172.0.0.1:80”的服务，修改为如下代码： 123456789101112131415161718192021222324252627&#123; &quot;services&quot;: [ &#123; &quot;id&quot;: &quot;API1&quot;,//唯一标识 &quot;name&quot;: &quot;API1&quot;,//服务名称 &quot;tags&quot;: [ &quot;API1&quot; ],//服务标签 &quot;address&quot;: &quot;172.0.0.1&quot;,//我随便配的IP，注意配置服务的真实IP和port &quot;port&quot;: 80 &#125;, &#123; &quot;id&quot;: &quot;API2&quot;, &quot;name&quot;: &quot;API2&quot;, &quot;tags&quot;: [ &quot;API2&quot; ], &quot;address&quot;: &quot;172.0.0.1&quot;,//我随便配的IP,注意配置服务的真实IP和port &quot;port&quot;: 81 &#125; ], &quot;check&quot;: [ &#123; &quot;id&quot;: &quot;APICheck&quot;, &quot;name&quot;: &quot;APICheck&quot;, &quot;tcp&quot;: &quot;119.29.50.115:80&quot;, &quot;interval&quot;: &quot;10s&quot;, &quot;timeout&quot;: &quot;1s&quot; &#125; ]&#125; check定义为service同级节点则是为所有服务使用同一个检查规则，定义在services节点内则是具体为某一个服务定义检查规则 启动如下图，很明显多了一个名叫APICheck 的代理。 启动页面也有不同，checks 为2了，说明check配置成功了。点击某个服务进去可以查看详细信息 docker部署（腾讯云）前面说的是本地部署，现在说一下基于腾讯云docker部署。首先拉去docker镜像创建服务。 Docker Hub（镜像文件库） 里包含Consul的镜像文件，只需要在Docker创建服务使用镜像就可以了。 设置容器端口为8500，服务端口为80，通过Ingress进行路由转发。 访问服务外网，结果如下，配置成功 配置Ocelot 网关首先修改前面的网关项目ApiGateway Startup.cs 文件里的 ConfigureServices方法，添加.AddConsul()方法代码如下: 12345678910111213141516171819202122232425262728public void ConfigureServices(IServiceCollection services)&#123; //Identity Server Bearer Tokens Action&lt;IdentityServerAuthenticationOptions&gt; isaOpt = option =&gt; &#123; option.Authority = Configuration[&quot;IdentityService:Uri&quot;]; option.RequireHttpsMetadata = Convert.ToBoolean(Configuration[&quot;IdentityService:UseHttps&quot;]); option.ApiName = Configuration[&quot;IdentityService:ApiName&quot;]; option.ApiSecret = Configuration[&quot;IdentityService:ApiSecret&quot;]; option.SupportedTokens = SupportedTokens.Both; &#125;; services.AddAuthentication().AddIdentityServerAuthentication(Configuration[&quot;IdentityService:DefaultScheme&quot;], isaOpt); services .AddOcelot(Configuration) .AddConsul() //启用缓存 .AddCacheManager(x =&gt; &#123; x.WithDictionaryHandle(); &#125;) .AddPolly() .AddAdministration(&quot;/administration&quot;, isaOpt); services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2); ; services.AddSwaggerGen(options =&gt; &#123; options.SwaggerDoc(Configuration[&quot;Swagger:Name&quot;], new Info &#123; Title = Configuration[&quot;Swagger:Title&quot;], Version = Configuration[&quot;Swagger:Version&quot;] &#125;); &#125;);&#125; 接下来配置ocelot.json 文件，在GlobalConfiguration节点下添加服务发现提供程序配置 1234567 //服务发现提供程序&quot;ServiceDiscoveryProvider&quot;: &#123; &quot;Host&quot;: &quot;111.230.118.59&quot;, &quot;Port&quot;: 80, &quot;Type&quot;: &quot;PollConsul&quot;, &quot;PollingInterval&quot;: 1000&#125; 项目上游配置添加ServiceName 和 UseServiceDiscovery属性，代码如下： 1234567891011121314151617181920212223242526272829&#123; &quot;UpstreamPathTemplate&quot;: &quot;/gateway/2/&#123;url&#125;&quot;, &quot;UpstreamHttpMethod&quot;: [ &quot;Get&quot;, &quot;Post&quot;, &quot;Delete&quot;, &quot;Put&quot; ], &quot;DownstreamPathTemplate&quot;: &quot;/api2/&#123;url&#125;&quot;, &quot;DownstreamScheme&quot;: &quot;http&quot;, &quot;ServiceName&quot;: &quot;API2&quot;, &quot;UseServiceDiscovery&quot;: true, &quot;LoadBalancer&quot;: &quot;RoundRobin&quot;, &quot;DownstreamHostAndPorts&quot;: [ &#123; &quot;Host&quot;: &quot;111.230.160.62&quot;, &quot;Port&quot;: 80 &#125;, &#123; &quot;Host&quot;: &quot;localhost&quot;, &quot;Port&quot;: 13002 &#125; ], &quot;QoSOptions&quot;: &#123; &quot;ExceptionsAllowedBeforeBreaking&quot;: 3, &quot;DurationOfBreak&quot;: 10, &quot;TimeoutValue&quot;: 5000 &#125; &quot;AuthenticationOptions&quot;: &#123; &quot;AuthenticationProviderKey&quot;: &quot;IdentityBearer&quot;, &quot;AllowedScopes&quot;: [ ] &#125;&#125; 启动OcelotGateway，API001，API002项目，通过http://localhost:13000/gateway/1/values，和http://localhost:13000/gateway/2/values访问；因为Ocelot配置了Consul的服务治理，所以可以通过配置的服务名称和GlobalConfiguratin的Consulhttpapi接口查找到对应服务的地址，进行访问，这些都是Ocelot帮我们做，这点很容易证明，可以修改Consul配置文件中服务的address为错误IP，就会发现通过13000端口访问不成功。 集成消息队列——CAP简介CAP 是一个基于 .NET Standard 的 C#库，它是一种处理分布式事务的解决方案，同样具有 EventBus的功能，它具有轻量级、易使用、高性能等特点。 微服务系统的过程中，通常需要使用事件来对各个服务进行集成，在这过程中简单的使用消息队列并不能保证数据的最终一致性，CAP采用的是和当前数据库集成的本地消息表的方案来解决在分布式系统互相调用的各个环节可能出现的异常，它能够保证任何情况下事件消息都是不会丢失的。 Github 地址：https://github.com/dotnetcore/CAP 支持消息队列： Kafka RabbitMQ AzureServiceBus 数据库存储： Sql Server MySql PostgreSQL MongoDB 环境准备我们以RabbitMQ 与Sql Server来讲解。 首先我们需要安装RabbitMQ 服务，很简单，官方下载最新的安装包。 但是在安装RabbitMQ时会提示安装Erlang，Erlang是一种通用的面向并发的编程语言，Erlang来编写分布式应用要简单的多。RabbitMQ是用Erlang实现的一个高并发高可靠AMQP消息队列服务器。 官方下载对应的Erlang 安装程序，建议RabbitMQ和Erlang都安装最新版本 安装完成之后，会多了以下几个程序，安装包帮我生成了start、remove、stop等命令程序。我们拿来直接用就可以了，当然你也可以配置环境变量，使用命令启动。先运行start程序运行起来。 .Net Core 集成 CAPNuget 包下载： DotNetCore.CAP 核心包 DotNetCore.CAP.RabbitMQ CAP RabbitMQ 包 DotNetCore.CAP.SqlServer CAP Sql Server 扩展包 继续修改测试项目Service.Test1项目，使用CodeFirst生成数据库： 新建测试类Test： 12345678public class Test&#123; public int Id &#123; get; set; &#125; public string Name &#123; get; set; &#125; public string Title &#123; get; set; &#125;&#125; 添加AppDbContext 数据库上下文 文件，代码如下： 1234567891011121314public class AppDbContext:DbContext&#123; public AppDbContext(DbContextOptions&lt;AppDbContext&gt; options) : base(options) &#123; &#125; public virtual DbSet&lt;Test&gt; Tests &#123; get; set; &#125; protected override void OnModelCreating(ModelBuilder modelBuilder) &#123; base.OnModelCreating(modelBuilder); &#125;&#125; 配置数据库连接字符串： 123&quot;ConnectionStrings&quot;: &#123; &quot;Default&quot;: &quot;Server=(localdb)\\\\MSSQLLocalDB; Database=Service_test1; Trusted_Connection=True;&quot;&#125; Program.cs 文件配置读取appsettings.json文件。 12345678public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt; WebHost.CreateDefaultBuilder(args) .ConfigureAppConfiguration((hostingContext, config) =&gt; &#123; config.AddJsonFile(&quot;appsettings.json&quot;, optional: true, reloadOnChange: true) .AddEnvironmentVariables(); &#125;) .UseStartup&lt;Startup&gt;(); Startup.cs 文件ConfigureServices添加数据访问配置 123services.AddDbContext&lt;AppDbContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString(&quot;Default&quot;)));services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2); 到这里正常的CodeFirst项目配置已经完成了，直接运行数据迁移命令就可以创建数据库了。 但是我这里需要集成CAP，肯定这样是不行的。需要进行CAP的配置，继续在ConfigureServices添加如下代码： 123456789101112131415161718192021222324252627services.AddDbContext&lt;AppDbContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString(&quot;Default&quot;)));services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);Action&lt;CapOptions&gt; capOptions = option =&gt;&#123; option.UseEntityFramework&lt;AppDbContext&gt;(); option.UseSqlServer(Configuration.GetConnectionString(&quot;Default&quot;)); option.UseRabbitMQ(&quot;localhost&quot;);//UseRabbitMQ 服务器地址配置，支持配置IP地址和密码 option.UseDashboard();//CAP2.X版本以后官方提供了Dashboard页面访问。 if (Convert.ToBoolean(Configuration[&quot;Cap:UseConsul&quot;])) &#123; option.UseDiscovery(discovery =&gt; &#123; discovery.DiscoveryServerHostName = Configuration[&quot;Cap:DiscoveryServerHostName&quot;]; discovery.DiscoveryServerPort = Convert.ToInt32(Configuration[&quot;Cap:DiscoveryServerPort&quot;]); discovery.CurrentNodeHostName = Configuration[&quot;Cap:CurrentNodeHostName&quot;]; discovery.CurrentNodePort = Convert.ToInt32(Configuration[&quot;Cap:CurrentNodePort&quot;]); discovery.NodeId = Convert.ToInt32(Configuration[&quot;Cap:NodeId&quot;]); discovery.NodeName = Configuration[&quot;Cap:NodeName&quot;]; discovery.MatchPath = Configuration[&quot;Cap:MatchPath&quot;]; &#125;); &#125;&#125;;services.AddCap(capOptions); RabbitMQ 也是支持配置options 12345678option.UseRabbitMQ(cfg =&gt;&#123; cfg.HostName = Configuration[&quot;MQ:Host&quot;]; cfg.VirtualHost = Configuration[&quot;MQ:VirtualHost&quot;]; cfg.Port = Convert.ToInt32(Configuration[&quot;MQ:Port&quot;]); cfg.UserName = Configuration[&quot;MQ:UserName&quot;]; cfg.Password = Configuration[&quot;MQ:Password&quot;];&#125;); CAP 内置集成了Consul服务注册，注册的同时默认携带了简况检查，但是只支持HTTP检查，所以我们需要在接口中定义health路径提供给检查访问。 在appsetting.json 文件中添加相应的配置节点： 12345678910&quot;Cap&quot;: &#123; &quot;UseConsul&quot;: true,//是否开启 &quot;CurrentNodeHostName&quot;: &quot;localhost&quot;,//当前节点IP &quot;CurrentNodePort&quot;: 13001,//当前节点Port &quot;DiscoveryServerHostName&quot;: &quot;127.0.0.1&quot;,//发现服务主机IP &quot;DiscoveryServerPort&quot;: 8500,//发现服务主机Port &quot;NodeId&quot;: 1,//节点标识 &quot;NodeName&quot;: &quot;CAP_API1&quot;,//节点名称 &quot;MatchPath&quot;: &quot;/api1/TestOnes&quot;//健康检查根路劲 最终的路径为api1/TestOnes/health&#125; 进行数据迁移创建数据库，表结构如下： Cap 发布接下来就是去使用Cap 发布了，修改Controller代码 123456789101112131415161718192021222324public class TestOnesController : ControllerBase&#123; private readonly ICapPublisher _capBus; public TestOnesController(ICapPublisher capPublisher) &#123; _capBus = capPublisher; &#125; [HttpGet] public ActionResult&lt;IEnumerable&lt;string&gt;&gt; Get() &#123; _capBus.Publish(&quot;services.test1.show.time&quot;, DateTime.Now); return new string[] &#123; &quot;TestOnes_value1&quot;, &quot;TestOnes_value2&quot; &#125;; &#125; //定义路由为health提供给服务检查使用 [HttpGet] [Route(&quot;health&quot;)] public ActionResult&lt;string&gt; Health() &#123; return &quot;Health!!!!!&quot;; &#125;&#125; 因为启用的Consul ，所以要按照前面说过的consul 教程来启动consul 访问http://127.0.0.1:8500，页面如下 接下来启动项目，还是老样子直接看到如下页面。 但是我们集成了CAP，所以可以访问呢http://localhost:13001/cap 访问capDashboard页面查看详细 这里一般启动的话发出的时不存在，也是因为前面有测试过，数据库里存在了。我们调用api1/TestOnes方法发出消息。 请求成功，在来看看数据库。数据库多了两张表，以张是接收数据表，一张是发布数据表。 再来看看里面的数据，也是就是发布的消息，因为之前请求过四次，我这边就多了四条数据。 cap Dashboard也能看到一些统计和数据列表 再来看看consul 页面，一个CAP_API1 的服务已经被注册进来了 如果前面 MatchPath路径没有配置对的话，就会出现下面的情况，导致无法通过健康检查。 Cap 订阅（接收）使用API订阅消息，为了方便，使用同一个项目的另一个接口实现订阅 123456789101112[Route(&quot;api1/[controller]&quot;)][ApiController]public class ValuesController : ControllerBase&#123; [HttpGet(&quot;Received&quot;)] [CapSubscribe(&quot;services.test1.show.time&quot;)]//配置发布时填写的Name public ActionResult&lt;string&gt; GetReceivedMessage(DateTime datetime) &#123; Console.WriteLine(&quot;订阅:&quot;+datetime); return &quot;订阅:&quot; + datetime; &#125;&#125; 这样就OK了，但是如果你时在不同的项目，还是需要像前面一样配置CAP。 启动项目请求一次CAP发布接口，查看http://localhost:13001/cap可以看到接收的里面有1条数据 订阅列表中也有了一条数据 在来看数据库也添加一条数据 最后——附上总体代码整个实践代码已托管到Github，具体如下所示：https://github.com/magicodes/Magicodes.Simple.Services","categories":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/categories/NET-CORE/"},{"name":"微服务","slug":"NET-CORE/微服务","permalink":"https://zcheng.site/categories/NET-CORE/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"架构","slug":"NET-CORE/微服务/架构","permalink":"https://zcheng.site/categories/NET-CORE/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%9E%B6%E6%9E%84/"}],"tags":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/tags/NET-CORE/"},{"name":"微服务","slug":"微服务","permalink":"https://zcheng.site/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Ocelot","slug":"Ocelot","permalink":"https://zcheng.site/tags/Ocelot/"},{"name":"Consul","slug":"Consul","permalink":"https://zcheng.site/tags/Consul/"}]},{"title":"OData——让查询变的随心所欲","slug":"OData——让查询变的随心所欲","date":"2020-05-08T00:49:31.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"OData——让查询变的随心所欲.html","link":"","permalink":"https://zcheng.site/OData%E2%80%94%E2%80%94%E8%AE%A9%E6%9F%A5%E8%AF%A2%E5%8F%98%E7%9A%84%E9%9A%8F%E5%BF%83%E6%89%80%E6%AC%B2.html","excerpt":"","text":"OData是什么Open Data Protocol（开放数据协议，OData）是用来查询和更新数据的一种Web协议，其提供了把存在于应用程序中的数据暴露出来的方式。OData运用且构建于很多Web技术之上，比如HTTP、Atom Publishing Protocol（AtomPub）和JSON，提供了从各种应用程序、服务和存储库中访问信息的能力。OData被用来从各种数据源中暴露和访问信息，这些数据源包括但不限于：关系数据库、文件系统、内容管理系统和传统Web站点。更多详细定义可以查阅OData官网，接下来用示例看看OData是怎么让查询随心所欲。 示例新建一个.NET CORE 3+ WEBAPI 项目，安装 Microsoft.AspNetCore.OData 及其所有依赖项添加测试模型Student，用来进行数据查询 123456public class Student&#123; public int Id &#123; get; set; &#125; public string Name &#123; get; set; &#125; public int Age &#123; get; set; &#125;&#125; 添加数据调用控制器，继承 ControllerBase ，添加Get 方法以便于插叙Student 数据，添加 [EnableQuery] ，用来支持OData查询选项。 1234567891011121314151617181920212223242526272829303132333435363738[Route(&quot;api/[controller]&quot;)]public class TestController : ControllerBase&#123; private List&lt;Student&gt; students = new List&lt;Student&gt;() &#123; new Student() &#123; Id = 1, Name = &quot;张三&quot;, Age = 18, &#125;, new Student() &#123; Id = 2, Name = &quot;李四&quot;, Age = 88, &#125;, new Student() &#123; Id = 3, Name = &quot;赵五&quot;, Age = 20, &#125;, new Student() &#123; Id = 4, Name = &quot;王六&quot;, Age = 42, &#125; &#125;; [EnableQuery] [HttpGet] public List&lt;Student&gt; Get() &#123; return students; &#125;&#125; 接下来在Startup 配置OData 1234567public void ConfigureServices(IServiceCollection services)&#123; services.AddControllers(); //添加OData services.AddOData();&#125; 12345678910111213141516171819202122public void Configure(IApplicationBuilder app, IWebHostEnvironment env)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.UseHttpsRedirection(); app.UseRouting(); app.UseAuthorization(); //配置OData 路由节点 app.UseEndpoints(endpoints =&gt; &#123; endpoints.MapControllers(); endpoints.EnableDependencyInjection(); endpoints.Filter().Count().Expand().OrderBy().Select().MaxTop(null).; &#125;);&#125; 这里需要注意的是，查阅了很多文档资料，都是用的以下配置，先禁用掉了控制器的端点路由配置，然后在Configure中使用MVC路由配置，这样也是可以了，但是OData7.4版本已经支持端点路由配置了，也没有必要那样去做了 1234567891011121314151617181920212223242526272829//不推荐写法public void ConfigureServices(IServiceCollection services)&#123; services.AddControllers(mvcOptions=&gt;mvcOption.EnableEndpointRouting = false); //添加OData services.AddOData();&#125;public void Configure(IApplicationBuilder app, IWebHostEnvironment env)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.UseHttpsRedirection(); app.UseRouting(); app.UseAuthorization(); app.UseMvc(routeBuilder =&gt; &#123; routeBuilder.EnableDependencyInjection(); routeBuilder.Filter().Count().Expand().OrderBy().Select().MaxTop(null).; &#125;); &#125; 现在可以在数据上尝试$select，$orderby，$filter，$count，$skip 和$top的常规操作，结果如图所示： 默认情况下 /api/test $ orderby /api/test?$orderby=age desc $ orderby /api/test?$filter=age eq 42filter 语法条件列表|条件 | 备注 | 示例 ||–|–|–|eq |等于 |$filter=priority et 1ne| 不等于 |$filter=priority ne 1gt| 大于| $filter=priority gt 1ge| 大于或等于| $filter=priority ge 1lt |少于 |$filter=priority lt 1le| 小于或等于 |$filter=priority le 1and| 并且 |$filter=priority gt 1 and priority lt 10or| 或者| $filter=priority gt 1 or priority lt 10not| 不是 |$filter=not endswith(name,’task’) $ skip&amp; $ top /api/test? $skip=2&amp; $top=2但是在执行 select 的时候数据出现了问题 这是因为采用非Edm路线配置OData，则需要安装Microsoft.AspNetCore.Mvc.NewtonsoftJson 软件包来解决Json格式问题 ，然后修改Startup文件ConfigureService 以启用Json格式扩展方法 1234567public void ConfigureServices(IServiceCollection services)&#123; services.AddControllers().AddNewtonsoftJson(); services.AddOData();&#125; 配置完成之后我们在来看看select 结果，很显然数据有了变动，只查出了name字段 这里顺便在提一下Edm路线配置OData，主要区别在与OData路由策略的配置 12345678910111213141516171819202122232425262728public void Configure(IApplicationBuilder app, IWebHostEnvironment env)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.UseHttpsRedirection(); app.UseRouting(); app.UseAuthorization(); app.UseEndpoints(endpoints =&gt; &#123; endpoints.MapControllers(); endpoints.Select().Filter().OrderBy().Count().MaxTop(null); endpoints.MapODataRoute(&quot;odata&quot;, &quot;odata&quot;, GetEdmModel()); &#125;);&#125;private IEdmModel GetEdmModel()&#123; var odataBuilder = new ODataConventionModelBuilder(); odataBuilder.EntitySet&lt;Student&gt;(&quot;Student&quot;); return odataBuilder.GetEdmModel();&#125; 总结现在OData 在.NET CORE 3.1的配置已经初步配置完，是不是觉得数据查询变的随心所欲，在也不需要为了需求的变动来回修改Dto了，OData 的语法远远不止这些，如需了解请移步到官网查看更多语法","categories":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/categories/NET-CORE/"}],"tags":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/tags/NET-CORE/"},{"name":"OData","slug":"OData","permalink":"https://zcheng.site/tags/OData/"}]},{"title":"Autofac在.NET Core 中的使用","slug":"Autofac在.NET_Core_中的使用","date":"2020-05-06T23:40:37.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"Autofac在.NET_Core_中的使用.html","link":"","permalink":"https://zcheng.site/Autofac%E5%9C%A8.NET_Core_%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8.html","excerpt":"","text":"前言Autofac 是一款.NET IoC 容器 . 它管理类之间的依赖关系, 从而使应用在规模及复杂性增长的情况下依然可以轻易地修改 。.NET CORE 中也内置了依赖注入，但是有些情况下需要用到Autofac去进行依赖注入，Autofac支持的所有注入方式以外，还支持属性注入和方法注入。接下来我们通过示例来简单了解Autofac的使用 示例新建两个.NET CORE 项目，一个WEB层，一个服务层 服务层中添加几个测试服务和模块文件 服务代码都如图所示 引入Autofac Nuget包文件 NetCoreAutofacServiceModule 类继承Autofac.Module，并重写Autofac管道中的Load方法，如下图多种方式注入服务。 接下来就是在WEB层配置Autofac，这里需要注意的是.Net Core2+ 和 .Net Core3+ 的配置方法稍有不同 .NET CORE 2+ 在NET Core 2.1时候，AutoFac返回一个 IServiceProvider 参数注入到ConfigureServices .NET Core 服务中，写法如下： 12345public IServiceProvider ConfigureServices(IServiceCollection services)&#123; services.AddControllers(); return AutofacProvider.RegisterForNetCore2(services);&#125; 123456789//将定义的策略和AutoFac 一起替换内置DIpublic static IServiceProvider RegisterForNetCore2(IServiceCollection services) &#123; var builder = new ContainerBuilder(); builder.Populate(services); //按模块注入服务 builder.RegisterModule&lt;NetCoreAutofacServiceModule&gt;(); var Container = builder.Build(); return new AutofacServiceProvider(Container);&#125; .NET CORE 3+ 在.NET Core3.0 使用上面的写法，框架运行之后会报错： ConfigureServices returning an System.IServiceProvider isn’t supported. .NET Core 3.0 引入了具有强类型容器配置的功能。它提供了 ConfigureContainer 方法，可以在其中使用Autofac来注册事物，而不必通过 ServiceCollection 来注册事物。首先需要在 Program.cs 中修改服务工厂，内置是 ServiceProviderFactory 的，修改指定为： AutofacServiceProviderFactory 。 1234567public static IHostBuilder CreateHostBuilder(string[] args) =&gt; Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder =&gt; &#123; webBuilder.UseStartup&lt;Startup&gt;(); &#125;) .UseServiceProviderFactory(new AutofacServiceProviderFactory()); 然后在 Startup.cs 中添加方法 ConfigureContainer ，并配置Autofac策略 1234public void ConfigureContainer(ContainerBuilder builder)&#123; AutofacProvider.RegisterForNetCore3(builder);&#125; 1234public static void RegisterForNetCore3(ContainerBuilder builder)&#123; builder.RegisterModule&lt;NetCoreAutofacServiceModule&gt;();&#125; 最后在控制器中依赖注入服务，可以在方法上用[FromServices]注入，也可以通过构造函数注入 12345678[HttpGet][Route(&quot;GetName&quot;)]public string GetName([FromServices] IThreeRepository threeRepository, [FromServices] IOneService oneService, [FromServices] ITwoService twoService)&#123; return $&quot;【threeRepository】 : &#123;threeRepository.GetName()&#125;; 【oneService】 : &#123;oneService.GetName()&#125; ; 【twoService】 : &#123;twoService.GetName()&#125;&quot;;&#125; 启动服务看看结果服务已经注册成功ThreeRepository 与 IThreeRepository 通过 RegisterType 方法注册； 1builder.RegisterType&lt;ThreeRepository&gt;().AsImplementedInterfaces(); OneService、IOneService、TwoService、ITwoService 则是通过RegisterAssemblyTypes方式注册； 1builder.RegisterAssemblyTypes(typeof(NetCoreAutofacServiceModule).Assembly).Where(a =&gt; a.Name.EndsWith(&quot;Service&quot;)).AsImplementedInterfaces();","categories":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/categories/NET-CORE/"}],"tags":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/tags/NET-CORE/"},{"name":"Autofac","slug":"Autofac","permalink":"https://zcheng.site/tags/Autofac/"}]},{"title":"详解.NET Core 依赖注入生命周期","slug":"详解.NET_Core_依赖注入生命周期","date":"2020-05-04T21:24:41.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"详解.NET_Core_依赖注入生命周期.html","link":"","permalink":"https://zcheng.site/%E8%AF%A6%E8%A7%A3.NET_Core_%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","excerpt":"","text":"前言.NET Core 自带依赖注入框架，支持三种不同生命周期的注入模式： Singleton 单例模式 Scoped 区域模式 Transient 瞬时模式 但是常常不知道什么时候使用哪种模式才最合适，接下来我就用代码详细解读一下三种模式 代码示例首先新建.NET Core API项目来进行代码测试 分别新建 Scoped、Singleton、Transient 三种模式的服务与接口，里面写一个GetIndex() 方法获取index ，用来区别服务的生命周期。三个服务代码都是如此，然后添加依赖注入最后在控制器中天加测试方法 使用 [FromService] 特性注入服务，每次服务注入两次，用来区别服务的变化，输出服务的index，启动项目查看结果 上图可以看到单例和区域模式下，两次注入的服务index是叠加的，可以说明两次服务注入的都是同一个。而瞬时模式两次注入的服务index都是初始值，也就说明两次服务都是新的。然后我们不停止项目在执行一次方法可以看到单列模式和区域模式有了不同，单例模式注入的服务，index值一直在叠加，而区域模式有重新从0开始叠加。 总结结合以上示例可以清楚的分别三种模式的差别 Singleton单例模式，服务在第一次请求时被创建，其后的每次请求都沿用这个已创建的服务。 Scoped作用域模式，服务在每次请求时被创建，整个请求过程中都贯穿使用这个创建的服务。 Transient 瞬态模式，服务在每次请求时被创建","categories":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/categories/NET-CORE/"}],"tags":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/tags/NET-CORE/"},{"name":"依赖注入","slug":"依赖注入","permalink":"https://zcheng.site/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"}]},{"title":"ABP框架使用拦截器动态配置租户过滤器","slug":"ABP框架使用拦截器动态配置租户过滤器","date":"2020-04-25T00:31:20.000Z","updated":"2021-01-25T05:45:48.547Z","comments":true,"path":"ABP框架使用拦截器动态配置租户过滤器.html","link":"","permalink":"https://zcheng.site/ABP%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E7%A7%9F%E6%88%B7%E8%BF%87%E6%BB%A4%E5%99%A8.html","excerpt":"","text":"前言最近项目要求在ABP框架中根据TenantId是否为空来配置是否禁用租户过滤器。ABP自身给我我们禁用租户过滤器的两种方法官方文档 方法一：使用工作单元1234using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))&#123; var people2 = _personRepository.GetAllList(); &#125; 方法二：全局禁用过滤器 1Configuration.UnitOfWork.OverrideFilter(AbpDataFilters.MayHaveTenant, false); 但是方法一要修改的地方很多，嫌麻烦；方法二只能全局在Configuration中配置，不能动态改变，也不合适。于是我查阅了APB AOP和拦截技术，另外查阅了ABP自身注册了拦截器——UnitOfWorkRegistrar，会默认为继承自IRepository或者是IApplicationService的两种类型添加UnitOfWork特性，于是便可以通过拦截方法去实现动态禁用过滤器。 具体实现首先在Application 层新建一个TenantInterceptor 继承IInterceptor接口 123456789101112131415161718192021222324252627public class TenantInterceptor : IInterceptor&#123; public ILogger Logger &#123; get; set; &#125; public TenantInterceptor() &#123; Logger = NullLogger.Instance; &#125; public void Intercept(IInvocation invocation) &#123; // 从invocation中拿到当前注册进来的工作单元，主要用于获取TenantId Type t = invocation.InvocationTarget.GetType(); var unitOfWorkManager = (t.GetProperty(&quot;UnitOfWorkManager&quot;).GetValue(invocation.InvocationTarget)) as IUnitOfWorkManager; //根据TenantId是否禁用租户过滤器 if (unitOfWorkManager.Current.GetTenantId().HasValue) &#123; invocation.Proceed(); // 执行方法体 &#125; else &#123; // 禁用租户 // PS:这里不可以使用 using unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant, AbpDataFilters.MustHaveTenant); invocation.Proceed(); // 执行方法体 &#125; &#125;&#125; 拦截器里的内容很简单，主要就是根据工作单元获取TenantId来动态禁用过滤器。因为这里没有需要返回的东西，也就不用分同步异步去拦截。接下来就是为所需要禁用租户过滤器的类注册拦截器 123456789101112131415161718192021222324252627282930313233public static class TenantInterceptorRegistrar&#123; public static void Initialize(IKernel kernel) &#123; kernel.ComponentRegistered += Kernel_ComponentRegistered; &#125; private static void Kernel_ComponentRegistered(string key, IHandler handler) &#123; var implementationType = handler.ComponentModel.Implementation.GetTypeInfo(); // 为实现了接口IRepository接口的所有类注册拦截器 //if (typeof(IRepository).IsAssignableFrom(implementationType)) //&#123; // handler.ComponentModel.Interceptors.Add(new InterceptorReference(typeof(TenantInterceptor))); //&#125; // 为指定类注册拦截器 if (InternalAsyncHelper.DisableFilterTenantTypes.Any(a =&gt; a.IsAssignableFrom(implementationType))) &#123; handler.ComponentModel.Interceptors.Add(new InterceptorReference(typeof(TenantInterceptor))); &#125; &#125;&#125;internal static class InternalAsyncHelper&#123; public static Type[] DisableFilterTenantTypes = &#123; typeof(IRepository&lt;Student,Guid&gt;), typeof(IRepository&lt;School,Guid&gt;) &#125;;&#125; 在TenantInterceptorRegistrar的Initialize方法中，首先会注入整个ABP系统中唯一的IIocManager,然后就是订阅唯一的IocContainer这个容器的ComponentRegistered事件，在订阅事件中首先是获取当前触发此事件的类型信息，然后根据需求注册TenantInterceptor这个拦截器。 这里有一点需要注意，本来想为实现了IApplicationService接口的类注册拦截器，但是ASP.NET Boilerplate使用动态方法拦截的功能有一些限制 如果通过接口调用该方法，则可以将其用于任何公共方法（例如，通过接口使用的Application Services）。 如果直接从类引用（例如ASP.NET MVC或Web API控制器）中调用方法，则该方法应为虚拟方法。 一种方法应该是虚拟的，如果它的保护。 也就是如果将服务作为客户端的Web API控制器公开，那么方法必须是虚方法（virtual） 附上官方Git issues 最后一步就是把拦截器在模块文件中初始化 1234567891011public class ApplicationCoreModule : AbpModule&#123; public override void PreInitialize() &#123; TenantInterceptorRegistrar.Initialize(IocManager.IocContainer.Kernel); &#125; public override void Initialize() &#123; &#125;&#125; 这样就可以按着自己的需要在DisableFilterTenantTypes 中配置自己想配置的仓储了。","categories":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/categories/NET-CORE/"}],"tags":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/tags/NET-CORE/"},{"name":"ABP","slug":"ABP","permalink":"https://zcheng.site/tags/ABP/"},{"name":"AOP","slug":"AOP","permalink":"https://zcheng.site/tags/AOP/"}]}],"categories":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/categories/NET-CORE/"},{"name":"微服务","slug":"NET-CORE/微服务","permalink":"https://zcheng.site/categories/NET-CORE/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"架构","slug":"NET-CORE/微服务/架构","permalink":"https://zcheng.site/categories/NET-CORE/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%9E%B6%E6%9E%84/"}],"tags":[{"name":".NET CORE","slug":"NET-CORE","permalink":"https://zcheng.site/tags/NET-CORE/"},{"name":"微服务","slug":"微服务","permalink":"https://zcheng.site/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Ocelot","slug":"Ocelot","permalink":"https://zcheng.site/tags/Ocelot/"},{"name":"Consul","slug":"Consul","permalink":"https://zcheng.site/tags/Consul/"},{"name":"OData","slug":"OData","permalink":"https://zcheng.site/tags/OData/"},{"name":"Autofac","slug":"Autofac","permalink":"https://zcheng.site/tags/Autofac/"},{"name":"依赖注入","slug":"依赖注入","permalink":"https://zcheng.site/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"},{"name":"ABP","slug":"ABP","permalink":"https://zcheng.site/tags/ABP/"},{"name":"AOP","slug":"AOP","permalink":"https://zcheng.site/tags/AOP/"}]}